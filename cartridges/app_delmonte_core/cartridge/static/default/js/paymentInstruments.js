/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./.tmp/app_delmonte_core/js/components/cleave.js":
/*!********************************************************!*\
  !*** ./.tmp/app_delmonte_core/js/components/cleave.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\n\nvar Cleave = __webpack_require__(/*! cleave.js */ \"./node_modules/cleave.js/dist/cleave-esm.js\").default;\n\nmodule.exports = {\n  handleCreditCardNumber: function handleCreditCardNumber(cardFieldSelector, cardTypeSelector) {\n    var cleave = new Cleave(cardFieldSelector, {\n      creditCard: true,\n      onCreditCardTypeChanged: function onCreditCardTypeChanged(type) {\n        var creditCardTypes = {\n          visa: 'Visa',\n          mastercard: 'Master Card',\n          amex: 'Amex',\n          discover: 'Discover',\n          unknown: 'Unknown'\n        };\n        var cardType = creditCardTypes[Object.keys(creditCardTypes).indexOf(type) > -1 ? type : 'unknown'];\n        $(cardTypeSelector).val(cardType);\n        $('.card-number-wrapper').attr('data-type', type);\n\n        if (type === 'visa' || type === 'mastercard' || type === 'discover') {\n          $('#securityCode').attr('maxlength', 3);\n        } else {\n          $('#securityCode').attr('maxlength', 4);\n        }\n      }\n    });\n    $(cardFieldSelector).data('cleave', cleave);\n  },\n  serializeData: function serializeData(form) {\n    var serializedArray = form.serializeArray();\n    serializedArray.forEach(function (item) {\n      if (item.name.indexOf('cardNumber') > -1) {\n        item.value = $('#cardNumber').data('cleave').getRawValue(); // eslint-disable-line\n      }\n    });\n    return $.param(serializedArray);\n  }\n};\n\n//# sourceURL=webpack://sfra/./.tmp/app_delmonte_core/js/components/cleave.js?");

/***/ }),

/***/ "./.tmp/app_delmonte_core/js/components/formValidation.js":
/*!****************************************************************!*\
  !*** ./.tmp/app_delmonte_core/js/components/formValidation.js ***!
  \****************************************************************/
/***/ (function(module) {

eval("\n/**\n * Remove all validation. Should be called every time before revalidating form\n * @param {element} form - Form to be cleared\n * @returns {void}\n */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction clearFormErrors(form) {\n  $(form).find('.form-control.is-invalid').removeClass('is-invalid');\n}\n\nmodule.exports = function (formElement, payload) {\n  // clear form validation first\n  clearFormErrors(formElement);\n  $('.alert', formElement).remove();\n\n  if (_typeof(payload) === 'object' && payload.fields) {\n    Object.keys(payload.fields).forEach(function (key) {\n      if (payload.fields[key]) {\n        var feedbackElement = $(formElement).find('[name=\"' + key + '\"]').parent().children('.invalid-feedback');\n\n        if (feedbackElement.length > 0) {\n          if (Array.isArray(payload[key])) {\n            feedbackElement.html(payload.fields[key].join('<br/>'));\n          } else {\n            feedbackElement.html(payload.fields[key]);\n          }\n\n          feedbackElement.siblings('.form-control').addClass('is-invalid');\n        }\n      }\n    });\n  }\n\n  if (payload && payload.error) {\n    var form = $(formElement).prop('tagName') === 'FORM' ? $(formElement) : $(formElement).parents('form');\n    form.prepend('<div class=\"alert alert-danger\" role=\"alert\">' + payload.error.join('<br/>') + '</div>');\n  }\n};\n\n//# sourceURL=webpack://sfra/./.tmp/app_delmonte_core/js/components/formValidation.js?");

/***/ }),

/***/ "./.tmp/app_delmonte_core/js/paymentInstruments.js":
/*!*********************************************************!*\
  !*** ./.tmp/app_delmonte_core/js/paymentInstruments.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("\n\nvar processInclude = __webpack_require__(/*! ./util */ \"./.tmp/app_delmonte_core/js/util.js\");\n\n$(document).ready(function () {\n  processInclude(__webpack_require__(/*! ./paymentInstruments/paymentInstruments */ \"./.tmp/app_delmonte_core/js/paymentInstruments/paymentInstruments.js\"));\n});\n\n//# sourceURL=webpack://sfra/./.tmp/app_delmonte_core/js/paymentInstruments.js?");

/***/ }),

/***/ "./.tmp/app_delmonte_core/js/paymentInstruments/paymentInstruments.js":
/*!****************************************************************************!*\
  !*** ./.tmp/app_delmonte_core/js/paymentInstruments/paymentInstruments.js ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\n\nvar formValidation = __webpack_require__(/*! ../components/formValidation */ \"./.tmp/app_delmonte_core/js/components/formValidation.js\");\n\nvar cleave = __webpack_require__(/*! ../components/cleave */ \"./.tmp/app_delmonte_core/js/components/cleave.js\");\n\nvar url;\nmodule.exports = {\n  removePayment: function removePayment() {\n    $('.remove-payment').on('click', function (e) {\n      e.preventDefault();\n      url = $(this).data('url') + '?UUID=' + $(this).data('id');\n      $('.payment-to-remove').empty().append($(this).data('card'));\n      $('.delete-confirmation-btn').click(function (f) {\n        f.preventDefault();\n        $('.remove-payment').trigger('payment:remove', f);\n        $.ajax({\n          url: url,\n          type: 'get',\n          dataType: 'json',\n          success: function success(data) {\n            $('#uuid-' + data.UUID).remove();\n\n            if (data.message) {\n              var toInsert = '<div class=\"row justify-content-center h3 no-saved-payments\"><p>' + data.message + '</p></div>';\n              $('.paymentInstruments').empty().append(toInsert);\n            }\n          },\n          error: function error(err) {\n            if (err.responseJSON.redirectUrl) {\n              window.location.href = err.responseJSON.redirectUrl;\n            }\n\n            $.spinner().stop();\n          }\n        });\n      });\n    });\n  },\n  submitPayment: function submitPayment() {\n    $('form.payment-form').submit(function (e) {\n      var $form = $(this);\n      e.preventDefault();\n      url = $form.attr('action');\n      $form.spinner().start();\n      $('form.payment-form').trigger('payment:submit', e);\n      var formData = cleave.serializeData($form);\n      $.ajax({\n        url: url,\n        type: 'post',\n        dataType: 'json',\n        data: formData,\n        success: function success(data) {\n          $form.spinner().stop();\n\n          if (!data.success) {\n            formValidation($form, data);\n          } else {\n            location.href = data.redirectUrl;\n          }\n        },\n        error: function error(err) {\n          if (err.responseJSON.redirectUrl) {\n            window.location.href = err.responseJSON.redirectUrl;\n          }\n\n          $form.spinner().stop();\n        }\n      });\n      return false;\n    });\n  },\n  handleCreditCardNumber: function handleCreditCardNumber() {\n    if ($('#cardNumber').length && $('#cardType').length) {\n      cleave.handleCreditCardNumber('#cardNumber', '#cardType');\n    }\n  }\n};\n\n//# sourceURL=webpack://sfra/./.tmp/app_delmonte_core/js/paymentInstruments/paymentInstruments.js?");

/***/ }),

/***/ "./.tmp/app_delmonte_core/js/util.js":
/*!*******************************************!*\
  !*** ./.tmp/app_delmonte_core/js/util.js ***!
  \*******************************************/
/***/ (function(module) {

eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nmodule.exports = function (include) {\n  if (typeof include === 'function') {\n    include();\n  } else if (_typeof(include) === 'object') {\n    Object.keys(include).forEach(function (key) {\n      if (typeof include[key] === 'function') {\n        include[key]();\n      }\n    });\n  }\n};\n\n//# sourceURL=webpack://sfra/./.tmp/app_delmonte_core/js/util.js?");

/***/ }),

/***/ "./node_modules/cleave.js/dist/cleave-esm.js":
/*!***************************************************!*\
  !*** ./node_modules/cleave.js/dist/cleave-esm.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\nvar NumeralFormatter = function (numeralDecimalMark, numeralIntegerScale, numeralDecimalScale, numeralThousandsGroupStyle, numeralPositiveOnly, stripLeadingZeroes, prefix, signBeforePrefix, tailPrefix, delimiter) {\n  var owner = this;\n  owner.numeralDecimalMark = numeralDecimalMark || '.';\n  owner.numeralIntegerScale = numeralIntegerScale > 0 ? numeralIntegerScale : 0;\n  owner.numeralDecimalScale = numeralDecimalScale >= 0 ? numeralDecimalScale : 2;\n  owner.numeralThousandsGroupStyle = numeralThousandsGroupStyle || NumeralFormatter.groupStyle.thousand;\n  owner.numeralPositiveOnly = !!numeralPositiveOnly;\n  owner.stripLeadingZeroes = stripLeadingZeroes !== false;\n  owner.prefix = prefix || prefix === '' ? prefix : '';\n  owner.signBeforePrefix = !!signBeforePrefix;\n  owner.tailPrefix = !!tailPrefix;\n  owner.delimiter = delimiter || delimiter === '' ? delimiter : ',';\n  owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n};\n\nNumeralFormatter.groupStyle = {\n  thousand: 'thousand',\n  lakh: 'lakh',\n  wan: 'wan',\n  none: 'none'\n};\nNumeralFormatter.prototype = {\n  getRawValue: function (value) {\n    return value.replace(this.delimiterRE, '').replace(this.numeralDecimalMark, '.');\n  },\n  format: function (value) {\n    var owner = this,\n        parts,\n        partSign,\n        partSignAndPrefix,\n        partInteger,\n        partDecimal = ''; // strip alphabet letters\n\n    value = value.replace(/[A-Za-z]/g, '') // replace the first decimal mark with reserved placeholder\n    .replace(owner.numeralDecimalMark, 'M') // strip non numeric letters except minus and \"M\"\n    // this is to ensure prefix has been stripped\n    .replace(/[^\\dM-]/g, '') // replace the leading minus with reserved placeholder\n    .replace(/^\\-/, 'N') // strip the other minus sign (if present)\n    .replace(/\\-/g, '') // replace the minus sign (if present)\n    .replace('N', owner.numeralPositiveOnly ? '' : '-') // replace decimal mark\n    .replace('M', owner.numeralDecimalMark); // strip any leading zeros\n\n    if (owner.stripLeadingZeroes) {\n      value = value.replace(/^(-)?0+(?=\\d)/, '$1');\n    }\n\n    partSign = value.slice(0, 1) === '-' ? '-' : '';\n\n    if (typeof owner.prefix != 'undefined') {\n      if (owner.signBeforePrefix) {\n        partSignAndPrefix = partSign + owner.prefix;\n      } else {\n        partSignAndPrefix = owner.prefix + partSign;\n      }\n    } else {\n      partSignAndPrefix = partSign;\n    }\n\n    partInteger = value;\n\n    if (value.indexOf(owner.numeralDecimalMark) >= 0) {\n      parts = value.split(owner.numeralDecimalMark);\n      partInteger = parts[0];\n      partDecimal = owner.numeralDecimalMark + parts[1].slice(0, owner.numeralDecimalScale);\n    }\n\n    if (partSign === '-') {\n      partInteger = partInteger.slice(1);\n    }\n\n    if (owner.numeralIntegerScale > 0) {\n      partInteger = partInteger.slice(0, owner.numeralIntegerScale);\n    }\n\n    switch (owner.numeralThousandsGroupStyle) {\n      case NumeralFormatter.groupStyle.lakh:\n        partInteger = partInteger.replace(/(\\d)(?=(\\d\\d)+\\d$)/g, '$1' + owner.delimiter);\n        break;\n\n      case NumeralFormatter.groupStyle.wan:\n        partInteger = partInteger.replace(/(\\d)(?=(\\d{4})+$)/g, '$1' + owner.delimiter);\n        break;\n\n      case NumeralFormatter.groupStyle.thousand:\n        partInteger = partInteger.replace(/(\\d)(?=(\\d{3})+$)/g, '$1' + owner.delimiter);\n        break;\n    }\n\n    if (owner.tailPrefix) {\n      return partSign + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '') + owner.prefix;\n    }\n\n    return partSignAndPrefix + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '');\n  }\n};\nvar NumeralFormatter_1 = NumeralFormatter;\n\nvar DateFormatter = function (datePattern, dateMin, dateMax) {\n  var owner = this;\n  owner.date = [];\n  owner.blocks = [];\n  owner.datePattern = datePattern;\n  owner.dateMin = dateMin.split('-').reverse().map(function (x) {\n    return parseInt(x, 10);\n  });\n  if (owner.dateMin.length === 2) owner.dateMin.unshift(0);\n  owner.dateMax = dateMax.split('-').reverse().map(function (x) {\n    return parseInt(x, 10);\n  });\n  if (owner.dateMax.length === 2) owner.dateMax.unshift(0);\n  owner.initBlocks();\n};\n\nDateFormatter.prototype = {\n  initBlocks: function () {\n    var owner = this;\n    owner.datePattern.forEach(function (value) {\n      if (value === 'Y') {\n        owner.blocks.push(4);\n      } else {\n        owner.blocks.push(2);\n      }\n    });\n  },\n  getISOFormatDate: function () {\n    var owner = this,\n        date = owner.date;\n    return date[2] ? date[2] + '-' + owner.addLeadingZero(date[1]) + '-' + owner.addLeadingZero(date[0]) : '';\n  },\n  getBlocks: function () {\n    return this.blocks;\n  },\n  getValidatedDate: function (value) {\n    var owner = this,\n        result = '';\n    value = value.replace(/[^\\d]/g, '');\n    owner.blocks.forEach(function (length, index) {\n      if (value.length > 0) {\n        var sub = value.slice(0, length),\n            sub0 = sub.slice(0, 1),\n            rest = value.slice(length);\n\n        switch (owner.datePattern[index]) {\n          case 'd':\n            if (sub === '00') {\n              sub = '01';\n            } else if (parseInt(sub0, 10) > 3) {\n              sub = '0' + sub0;\n            } else if (parseInt(sub, 10) > 31) {\n              sub = '31';\n            }\n\n            break;\n\n          case 'm':\n            if (sub === '00') {\n              sub = '01';\n            } else if (parseInt(sub0, 10) > 1) {\n              sub = '0' + sub0;\n            } else if (parseInt(sub, 10) > 12) {\n              sub = '12';\n            }\n\n            break;\n        }\n\n        result += sub; // update remaining string\n\n        value = rest;\n      }\n    });\n    return this.getFixedDateString(result);\n  },\n  getFixedDateString: function (value) {\n    var owner = this,\n        datePattern = owner.datePattern,\n        date = [],\n        dayIndex = 0,\n        monthIndex = 0,\n        yearIndex = 0,\n        dayStartIndex = 0,\n        monthStartIndex = 0,\n        yearStartIndex = 0,\n        day,\n        month,\n        year,\n        fullYearDone = false; // mm-dd || dd-mm\n\n    if (value.length === 4 && datePattern[0].toLowerCase() !== 'y' && datePattern[1].toLowerCase() !== 'y') {\n      dayStartIndex = datePattern[0] === 'd' ? 0 : 2;\n      monthStartIndex = 2 - dayStartIndex;\n      day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);\n      month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n      date = this.getFixedDate(day, month, 0);\n    } // yyyy-mm-dd || yyyy-dd-mm || mm-dd-yyyy || dd-mm-yyyy || dd-yyyy-mm || mm-yyyy-dd\n\n\n    if (value.length === 8) {\n      datePattern.forEach(function (type, index) {\n        switch (type) {\n          case 'd':\n            dayIndex = index;\n            break;\n\n          case 'm':\n            monthIndex = index;\n            break;\n\n          default:\n            yearIndex = index;\n            break;\n        }\n      });\n      yearStartIndex = yearIndex * 2;\n      dayStartIndex = dayIndex <= yearIndex ? dayIndex * 2 : dayIndex * 2 + 2;\n      monthStartIndex = monthIndex <= yearIndex ? monthIndex * 2 : monthIndex * 2 + 2;\n      day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);\n      month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n      year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);\n      fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;\n      date = this.getFixedDate(day, month, year);\n    } // mm-yy || yy-mm\n\n\n    if (value.length === 4 && (datePattern[0] === 'y' || datePattern[1] === 'y')) {\n      monthStartIndex = datePattern[0] === 'm' ? 0 : 2;\n      yearStartIndex = 2 - monthStartIndex;\n      month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n      year = parseInt(value.slice(yearStartIndex, yearStartIndex + 2), 10);\n      fullYearDone = value.slice(yearStartIndex, yearStartIndex + 2).length === 2;\n      date = [0, month, year];\n    } // mm-yyyy || yyyy-mm\n\n\n    if (value.length === 6 && (datePattern[0] === 'Y' || datePattern[1] === 'Y')) {\n      monthStartIndex = datePattern[0] === 'm' ? 0 : 4;\n      yearStartIndex = 2 - 0.5 * monthStartIndex;\n      month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n      year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);\n      fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;\n      date = [0, month, year];\n    }\n\n    date = owner.getRangeFixedDate(date);\n    owner.date = date;\n    var result = date.length === 0 ? value : datePattern.reduce(function (previous, current) {\n      switch (current) {\n        case 'd':\n          return previous + (date[0] === 0 ? '' : owner.addLeadingZero(date[0]));\n\n        case 'm':\n          return previous + (date[1] === 0 ? '' : owner.addLeadingZero(date[1]));\n\n        case 'y':\n          return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], false) : '');\n\n        case 'Y':\n          return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], true) : '');\n      }\n    }, '');\n    return result;\n  },\n  getRangeFixedDate: function (date) {\n    var owner = this,\n        datePattern = owner.datePattern,\n        dateMin = owner.dateMin || [],\n        dateMax = owner.dateMax || [];\n    if (!date.length || dateMin.length < 3 && dateMax.length < 3) return date;\n    if (datePattern.find(function (x) {\n      return x.toLowerCase() === 'y';\n    }) && date[2] === 0) return date;\n    if (dateMax.length && (dateMax[2] < date[2] || dateMax[2] === date[2] && (dateMax[1] < date[1] || dateMax[1] === date[1] && dateMax[0] < date[0]))) return dateMax;\n    if (dateMin.length && (dateMin[2] > date[2] || dateMin[2] === date[2] && (dateMin[1] > date[1] || dateMin[1] === date[1] && dateMin[0] > date[0]))) return dateMin;\n    return date;\n  },\n  getFixedDate: function (day, month, year) {\n    day = Math.min(day, 31);\n    month = Math.min(month, 12);\n    year = parseInt(year || 0, 10);\n\n    if (month < 7 && month % 2 === 0 || month > 8 && month % 2 === 1) {\n      day = Math.min(day, month === 2 ? this.isLeapYear(year) ? 29 : 28 : 30);\n    }\n\n    return [day, month, year];\n  },\n  isLeapYear: function (year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n  },\n  addLeadingZero: function (number) {\n    return (number < 10 ? '0' : '') + number;\n  },\n  addLeadingZeroForYear: function (number, fullYearMode) {\n    if (fullYearMode) {\n      return (number < 10 ? '000' : number < 100 ? '00' : number < 1000 ? '0' : '') + number;\n    }\n\n    return (number < 10 ? '0' : '') + number;\n  }\n};\nvar DateFormatter_1 = DateFormatter;\n\nvar TimeFormatter = function (timePattern, timeFormat) {\n  var owner = this;\n  owner.time = [];\n  owner.blocks = [];\n  owner.timePattern = timePattern;\n  owner.timeFormat = timeFormat;\n  owner.initBlocks();\n};\n\nTimeFormatter.prototype = {\n  initBlocks: function () {\n    var owner = this;\n    owner.timePattern.forEach(function () {\n      owner.blocks.push(2);\n    });\n  },\n  getISOFormatTime: function () {\n    var owner = this,\n        time = owner.time;\n    return time[2] ? owner.addLeadingZero(time[0]) + ':' + owner.addLeadingZero(time[1]) + ':' + owner.addLeadingZero(time[2]) : '';\n  },\n  getBlocks: function () {\n    return this.blocks;\n  },\n  getTimeFormatOptions: function () {\n    var owner = this;\n\n    if (String(owner.timeFormat) === '12') {\n      return {\n        maxHourFirstDigit: 1,\n        maxHours: 12,\n        maxMinutesFirstDigit: 5,\n        maxMinutes: 60\n      };\n    }\n\n    return {\n      maxHourFirstDigit: 2,\n      maxHours: 23,\n      maxMinutesFirstDigit: 5,\n      maxMinutes: 60\n    };\n  },\n  getValidatedTime: function (value) {\n    var owner = this,\n        result = '';\n    value = value.replace(/[^\\d]/g, '');\n    var timeFormatOptions = owner.getTimeFormatOptions();\n    owner.blocks.forEach(function (length, index) {\n      if (value.length > 0) {\n        var sub = value.slice(0, length),\n            sub0 = sub.slice(0, 1),\n            rest = value.slice(length);\n\n        switch (owner.timePattern[index]) {\n          case 'h':\n            if (parseInt(sub0, 10) > timeFormatOptions.maxHourFirstDigit) {\n              sub = '0' + sub0;\n            } else if (parseInt(sub, 10) > timeFormatOptions.maxHours) {\n              sub = timeFormatOptions.maxHours + '';\n            }\n\n            break;\n\n          case 'm':\n          case 's':\n            if (parseInt(sub0, 10) > timeFormatOptions.maxMinutesFirstDigit) {\n              sub = '0' + sub0;\n            } else if (parseInt(sub, 10) > timeFormatOptions.maxMinutes) {\n              sub = timeFormatOptions.maxMinutes + '';\n            }\n\n            break;\n        }\n\n        result += sub; // update remaining string\n\n        value = rest;\n      }\n    });\n    return this.getFixedTimeString(result);\n  },\n  getFixedTimeString: function (value) {\n    var owner = this,\n        timePattern = owner.timePattern,\n        time = [],\n        secondIndex = 0,\n        minuteIndex = 0,\n        hourIndex = 0,\n        secondStartIndex = 0,\n        minuteStartIndex = 0,\n        hourStartIndex = 0,\n        second,\n        minute,\n        hour;\n\n    if (value.length === 6) {\n      timePattern.forEach(function (type, index) {\n        switch (type) {\n          case 's':\n            secondIndex = index * 2;\n            break;\n\n          case 'm':\n            minuteIndex = index * 2;\n            break;\n\n          case 'h':\n            hourIndex = index * 2;\n            break;\n        }\n      });\n      hourStartIndex = hourIndex;\n      minuteStartIndex = minuteIndex;\n      secondStartIndex = secondIndex;\n      second = parseInt(value.slice(secondStartIndex, secondStartIndex + 2), 10);\n      minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);\n      hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);\n      time = this.getFixedTime(hour, minute, second);\n    }\n\n    if (value.length === 4 && owner.timePattern.indexOf('s') < 0) {\n      timePattern.forEach(function (type, index) {\n        switch (type) {\n          case 'm':\n            minuteIndex = index * 2;\n            break;\n\n          case 'h':\n            hourIndex = index * 2;\n            break;\n        }\n      });\n      hourStartIndex = hourIndex;\n      minuteStartIndex = minuteIndex;\n      second = 0;\n      minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);\n      hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);\n      time = this.getFixedTime(hour, minute, second);\n    }\n\n    owner.time = time;\n    return time.length === 0 ? value : timePattern.reduce(function (previous, current) {\n      switch (current) {\n        case 's':\n          return previous + owner.addLeadingZero(time[2]);\n\n        case 'm':\n          return previous + owner.addLeadingZero(time[1]);\n\n        case 'h':\n          return previous + owner.addLeadingZero(time[0]);\n      }\n    }, '');\n  },\n  getFixedTime: function (hour, minute, second) {\n    second = Math.min(parseInt(second || 0, 10), 60);\n    minute = Math.min(minute, 60);\n    hour = Math.min(hour, 60);\n    return [hour, minute, second];\n  },\n  addLeadingZero: function (number) {\n    return (number < 10 ? '0' : '') + number;\n  }\n};\nvar TimeFormatter_1 = TimeFormatter;\n\nvar PhoneFormatter = function (formatter, delimiter) {\n  var owner = this;\n  owner.delimiter = delimiter || delimiter === '' ? delimiter : ' ';\n  owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n  owner.formatter = formatter;\n};\n\nPhoneFormatter.prototype = {\n  setFormatter: function (formatter) {\n    this.formatter = formatter;\n  },\n  format: function (phoneNumber) {\n    var owner = this;\n    owner.formatter.clear(); // only keep number and +\n\n    phoneNumber = phoneNumber.replace(/[^\\d+]/g, ''); // strip non-leading +\n\n    phoneNumber = phoneNumber.replace(/^\\+/, 'B').replace(/\\+/g, '').replace('B', '+'); // strip delimiter\n\n    phoneNumber = phoneNumber.replace(owner.delimiterRE, '');\n    var result = '',\n        current,\n        validated = false;\n\n    for (var i = 0, iMax = phoneNumber.length; i < iMax; i++) {\n      current = owner.formatter.inputDigit(phoneNumber.charAt(i)); // has ()- or space inside\n\n      if (/[\\s()-]/g.test(current)) {\n        result = current;\n        validated = true;\n      } else {\n        if (!validated) {\n          result = current;\n        } // else: over length input\n        // it turns to invalid number again\n\n      }\n    } // strip ()\n    // e.g. US: 7161234567 returns (716) 123-4567\n\n\n    result = result.replace(/[()]/g, ''); // replace library delimiter with user customized delimiter\n\n    result = result.replace(/[\\s-]/g, owner.delimiter);\n    return result;\n  }\n};\nvar PhoneFormatter_1 = PhoneFormatter;\nvar CreditCardDetector = {\n  blocks: {\n    uatp: [4, 5, 6],\n    amex: [4, 6, 5],\n    diners: [4, 6, 4],\n    discover: [4, 4, 4, 4],\n    mastercard: [4, 4, 4, 4],\n    dankort: [4, 4, 4, 4],\n    instapayment: [4, 4, 4, 4],\n    jcb15: [4, 6, 5],\n    jcb: [4, 4, 4, 4],\n    maestro: [4, 4, 4, 4],\n    visa: [4, 4, 4, 4],\n    mir: [4, 4, 4, 4],\n    unionPay: [4, 4, 4, 4],\n    general: [4, 4, 4, 4]\n  },\n  re: {\n    // starts with 1; 15 digits, not starts with 1800 (jcb card)\n    uatp: /^(?!1800)1\\d{0,14}/,\n    // starts with 34/37; 15 digits\n    amex: /^3[47]\\d{0,13}/,\n    // starts with 6011/65/644-649; 16 digits\n    discover: /^(?:6011|65\\d{0,2}|64[4-9]\\d?)\\d{0,12}/,\n    // starts with 300-305/309 or 36/38/39; 14 digits\n    diners: /^3(?:0([0-5]|9)|[689]\\d?)\\d{0,11}/,\n    // starts with 51-55/2221–2720; 16 digits\n    mastercard: /^(5[1-5]\\d{0,2}|22[2-9]\\d{0,1}|2[3-7]\\d{0,2})\\d{0,12}/,\n    // starts with 5019/4175/4571; 16 digits\n    dankort: /^(5019|4175|4571)\\d{0,12}/,\n    // starts with 637-639; 16 digits\n    instapayment: /^63[7-9]\\d{0,13}/,\n    // starts with 2131/1800; 15 digits\n    jcb15: /^(?:2131|1800)\\d{0,11}/,\n    // starts with 2131/1800/35; 16 digits\n    jcb: /^(?:35\\d{0,2})\\d{0,12}/,\n    // starts with 50/56-58/6304/67; 16 digits\n    maestro: /^(?:5[0678]\\d{0,2}|6304|67\\d{0,2})\\d{0,12}/,\n    // starts with 22; 16 digits\n    mir: /^220[0-4]\\d{0,12}/,\n    // starts with 4; 16 digits\n    visa: /^4\\d{0,15}/,\n    // starts with 62/81; 16 digits\n    unionPay: /^(62|81)\\d{0,14}/\n  },\n  getStrictBlocks: function (block) {\n    var total = block.reduce(function (prev, current) {\n      return prev + current;\n    }, 0);\n    return block.concat(19 - total);\n  },\n  getInfo: function (value, strictMode) {\n    var blocks = CreditCardDetector.blocks,\n        re = CreditCardDetector.re; // Some credit card can have up to 19 digits number.\n    // Set strictMode to true will remove the 16 max-length restrain,\n    // however, I never found any website validate card number like\n    // this, hence probably you don't want to enable this option.\n\n    strictMode = !!strictMode;\n\n    for (var key in re) {\n      if (re[key].test(value)) {\n        var matchedBlocks = blocks[key];\n        return {\n          type: key,\n          blocks: strictMode ? this.getStrictBlocks(matchedBlocks) : matchedBlocks\n        };\n      }\n    }\n\n    return {\n      type: 'unknown',\n      blocks: strictMode ? this.getStrictBlocks(blocks.general) : blocks.general\n    };\n  }\n};\nvar CreditCardDetector_1 = CreditCardDetector;\nvar Util = {\n  noop: function () {},\n  strip: function (value, re) {\n    return value.replace(re, '');\n  },\n  getPostDelimiter: function (value, delimiter, delimiters) {\n    // single delimiter\n    if (delimiters.length === 0) {\n      return value.slice(-delimiter.length) === delimiter ? delimiter : '';\n    } // multiple delimiters\n\n\n    var matchedDelimiter = '';\n    delimiters.forEach(function (current) {\n      if (value.slice(-current.length) === current) {\n        matchedDelimiter = current;\n      }\n    });\n    return matchedDelimiter;\n  },\n  getDelimiterREByDelimiter: function (delimiter) {\n    return new RegExp(delimiter.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1'), 'g');\n  },\n  getNextCursorPosition: function (prevPos, oldValue, newValue, delimiter, delimiters) {\n    // If cursor was at the end of value, just place it back.\n    // Because new value could contain additional chars.\n    if (oldValue.length === prevPos) {\n      return newValue.length;\n    }\n\n    return prevPos + this.getPositionOffset(prevPos, oldValue, newValue, delimiter, delimiters);\n  },\n  getPositionOffset: function (prevPos, oldValue, newValue, delimiter, delimiters) {\n    var oldRawValue, newRawValue, lengthOffset;\n    oldRawValue = this.stripDelimiters(oldValue.slice(0, prevPos), delimiter, delimiters);\n    newRawValue = this.stripDelimiters(newValue.slice(0, prevPos), delimiter, delimiters);\n    lengthOffset = oldRawValue.length - newRawValue.length;\n    return lengthOffset !== 0 ? lengthOffset / Math.abs(lengthOffset) : 0;\n  },\n  stripDelimiters: function (value, delimiter, delimiters) {\n    var owner = this; // single delimiter\n\n    if (delimiters.length === 0) {\n      var delimiterRE = delimiter ? owner.getDelimiterREByDelimiter(delimiter) : '';\n      return value.replace(delimiterRE, '');\n    } // multiple delimiters\n\n\n    delimiters.forEach(function (current) {\n      current.split('').forEach(function (letter) {\n        value = value.replace(owner.getDelimiterREByDelimiter(letter), '');\n      });\n    });\n    return value;\n  },\n  headStr: function (str, length) {\n    return str.slice(0, length);\n  },\n  getMaxLength: function (blocks) {\n    return blocks.reduce(function (previous, current) {\n      return previous + current;\n    }, 0);\n  },\n  // strip prefix\n  // Before type  |   After type    |     Return value\n  // PEFIX-...    |   PEFIX-...     |     ''\n  // PREFIX-123   |   PEFIX-123     |     123\n  // PREFIX-123   |   PREFIX-23     |     23\n  // PREFIX-123   |   PREFIX-1234   |     1234\n  getPrefixStrippedValue: function (value, prefix, prefixLength, prevResult, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix) {\n    // No prefix\n    if (prefixLength === 0) {\n      return value;\n    } // Value is prefix\n\n\n    if (value === prefix && value !== '') {\n      return '';\n    }\n\n    if (signBeforePrefix && value.slice(0, 1) == '-') {\n      var prev = prevResult.slice(0, 1) == '-' ? prevResult.slice(1) : prevResult;\n      return '-' + this.getPrefixStrippedValue(value.slice(1), prefix, prefixLength, prev, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix);\n    } // Pre result prefix string does not match pre-defined prefix\n\n\n    if (prevResult.slice(0, prefixLength) !== prefix && !tailPrefix) {\n      // Check if the first time user entered something\n      if (noImmediatePrefix && !prevResult && value) return value;\n      return '';\n    } else if (prevResult.slice(-prefixLength) !== prefix && tailPrefix) {\n      // Check if the first time user entered something\n      if (noImmediatePrefix && !prevResult && value) return value;\n      return '';\n    }\n\n    var prevValue = this.stripDelimiters(prevResult, delimiter, delimiters); // New value has issue, someone typed in between prefix letters\n    // Revert to pre value\n\n    if (value.slice(0, prefixLength) !== prefix && !tailPrefix) {\n      return prevValue.slice(prefixLength);\n    } else if (value.slice(-prefixLength) !== prefix && tailPrefix) {\n      return prevValue.slice(0, -prefixLength - 1);\n    } // No issue, strip prefix for new value\n\n\n    return tailPrefix ? value.slice(0, -prefixLength) : value.slice(prefixLength);\n  },\n  getFirstDiffIndex: function (prev, current) {\n    var index = 0;\n\n    while (prev.charAt(index) === current.charAt(index)) {\n      if (prev.charAt(index++) === '') {\n        return -1;\n      }\n    }\n\n    return index;\n  },\n  getFormattedValue: function (value, blocks, blocksLength, delimiter, delimiters, delimiterLazyShow) {\n    var result = '',\n        multipleDelimiters = delimiters.length > 0,\n        currentDelimiter = ''; // no options, normal input\n\n    if (blocksLength === 0) {\n      return value;\n    }\n\n    blocks.forEach(function (length, index) {\n      if (value.length > 0) {\n        var sub = value.slice(0, length),\n            rest = value.slice(length);\n\n        if (multipleDelimiters) {\n          currentDelimiter = delimiters[delimiterLazyShow ? index - 1 : index] || currentDelimiter;\n        } else {\n          currentDelimiter = delimiter;\n        }\n\n        if (delimiterLazyShow) {\n          if (index > 0) {\n            result += currentDelimiter;\n          }\n\n          result += sub;\n        } else {\n          result += sub;\n\n          if (sub.length === length && index < blocksLength - 1) {\n            result += currentDelimiter;\n          }\n        } // update remaining string\n\n\n        value = rest;\n      }\n    });\n    return result;\n  },\n  // move cursor to the end\n  // the first time user focuses on an input with prefix\n  fixPrefixCursor: function (el, prefix, delimiter, delimiters) {\n    if (!el) {\n      return;\n    }\n\n    var val = el.value,\n        appendix = delimiter || delimiters[0] || ' ';\n\n    if (!el.setSelectionRange || !prefix || prefix.length + appendix.length <= val.length) {\n      return;\n    }\n\n    var len = val.length * 2; // set timeout to avoid blink\n\n    setTimeout(function () {\n      el.setSelectionRange(len, len);\n    }, 1);\n  },\n  // Check if input field is fully selected\n  checkFullSelection: function (value) {\n    try {\n      var selection = window.getSelection() || document.getSelection() || {};\n      return selection.toString().length === value.length;\n    } catch (ex) {// Ignore\n    }\n\n    return false;\n  },\n  setSelection: function (element, position, doc) {\n    if (element !== this.getActiveElement(doc)) {\n      return;\n    } // cursor is already in the end\n\n\n    if (element && element.value.length <= position) {\n      return;\n    }\n\n    if (element.createTextRange) {\n      var range = element.createTextRange();\n      range.move('character', position);\n      range.select();\n    } else {\n      try {\n        element.setSelectionRange(position, position);\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn('The input element type does not support selection');\n      }\n    }\n  },\n  getActiveElement: function (parent) {\n    var activeElement = parent.activeElement;\n\n    if (activeElement && activeElement.shadowRoot) {\n      return this.getActiveElement(activeElement.shadowRoot);\n    }\n\n    return activeElement;\n  },\n  isAndroid: function () {\n    return navigator && /android/i.test(navigator.userAgent);\n  },\n  // On Android chrome, the keyup and keydown events\n  // always return key code 229 as a composition that\n  // buffers the user’s keystrokes\n  // see https://github.com/nosir/cleave.js/issues/147\n  isAndroidBackspaceKeydown: function (lastInputValue, currentInputValue) {\n    if (!this.isAndroid() || !lastInputValue || !currentInputValue) {\n      return false;\n    }\n\n    return currentInputValue === lastInputValue.slice(0, -1);\n  }\n};\nvar Util_1 = Util;\n/**\n * Props Assignment\n *\n * Separate this, so react module can share the usage\n */\n\nvar DefaultProperties = {\n  // Maybe change to object-assign\n  // for now just keep it as simple\n  assign: function (target, opts) {\n    target = target || {};\n    opts = opts || {}; // credit card\n\n    target.creditCard = !!opts.creditCard;\n    target.creditCardStrictMode = !!opts.creditCardStrictMode;\n    target.creditCardType = '';\n\n    target.onCreditCardTypeChanged = opts.onCreditCardTypeChanged || function () {}; // phone\n\n\n    target.phone = !!opts.phone;\n    target.phoneRegionCode = opts.phoneRegionCode || 'AU';\n    target.phoneFormatter = {}; // time\n\n    target.time = !!opts.time;\n    target.timePattern = opts.timePattern || ['h', 'm', 's'];\n    target.timeFormat = opts.timeFormat || '24';\n    target.timeFormatter = {}; // date\n\n    target.date = !!opts.date;\n    target.datePattern = opts.datePattern || ['d', 'm', 'Y'];\n    target.dateMin = opts.dateMin || '';\n    target.dateMax = opts.dateMax || '';\n    target.dateFormatter = {}; // numeral\n\n    target.numeral = !!opts.numeral;\n    target.numeralIntegerScale = opts.numeralIntegerScale > 0 ? opts.numeralIntegerScale : 0;\n    target.numeralDecimalScale = opts.numeralDecimalScale >= 0 ? opts.numeralDecimalScale : 2;\n    target.numeralDecimalMark = opts.numeralDecimalMark || '.';\n    target.numeralThousandsGroupStyle = opts.numeralThousandsGroupStyle || 'thousand';\n    target.numeralPositiveOnly = !!opts.numeralPositiveOnly;\n    target.stripLeadingZeroes = opts.stripLeadingZeroes !== false;\n    target.signBeforePrefix = !!opts.signBeforePrefix;\n    target.tailPrefix = !!opts.tailPrefix; // others\n\n    target.swapHiddenInput = !!opts.swapHiddenInput;\n    target.numericOnly = target.creditCard || target.date || !!opts.numericOnly;\n    target.uppercase = !!opts.uppercase;\n    target.lowercase = !!opts.lowercase;\n    target.prefix = target.creditCard || target.date ? '' : opts.prefix || '';\n    target.noImmediatePrefix = !!opts.noImmediatePrefix;\n    target.prefixLength = target.prefix.length;\n    target.rawValueTrimPrefix = !!opts.rawValueTrimPrefix;\n    target.copyDelimiter = !!opts.copyDelimiter;\n    target.initValue = opts.initValue !== undefined && opts.initValue !== null ? opts.initValue.toString() : '';\n    target.delimiter = opts.delimiter || opts.delimiter === '' ? opts.delimiter : opts.date ? '/' : opts.time ? ':' : opts.numeral ? ',' : opts.phone ? ' ' : ' ';\n    target.delimiterLength = target.delimiter.length;\n    target.delimiterLazyShow = !!opts.delimiterLazyShow;\n    target.delimiters = opts.delimiters || [];\n    target.blocks = opts.blocks || [];\n    target.blocksLength = target.blocks.length;\n    target.root = typeof commonjsGlobal === 'object' && commonjsGlobal ? commonjsGlobal : window;\n    target.document = opts.document || target.root.document;\n    target.maxLength = 0;\n    target.backspace = false;\n    target.result = '';\n\n    target.onValueChanged = opts.onValueChanged || function () {};\n\n    return target;\n  }\n};\nvar DefaultProperties_1 = DefaultProperties;\n/**\n * Construct a new Cleave instance by passing the configuration object\n *\n * @param {String | HTMLElement} element\n * @param {Object} opts\n */\n\nvar Cleave = function (element, opts) {\n  var owner = this;\n  var hasMultipleElements = false;\n\n  if (typeof element === 'string') {\n    owner.element = document.querySelector(element);\n    hasMultipleElements = document.querySelectorAll(element).length > 1;\n  } else {\n    if (typeof element.length !== 'undefined' && element.length > 0) {\n      owner.element = element[0];\n      hasMultipleElements = element.length > 1;\n    } else {\n      owner.element = element;\n    }\n  }\n\n  if (!owner.element) {\n    throw new Error('[cleave.js] Please check the element');\n  }\n\n  if (hasMultipleElements) {\n    try {\n      // eslint-disable-next-line\n      console.warn('[cleave.js] Multiple input fields matched, cleave.js will only take the first one.');\n    } catch (e) {// Old IE\n    }\n  }\n\n  opts.initValue = owner.element.value;\n  owner.properties = Cleave.DefaultProperties.assign({}, opts);\n  owner.init();\n};\n\nCleave.prototype = {\n  init: function () {\n    var owner = this,\n        pps = owner.properties; // no need to use this lib\n\n    if (!pps.numeral && !pps.phone && !pps.creditCard && !pps.time && !pps.date && pps.blocksLength === 0 && !pps.prefix) {\n      owner.onInput(pps.initValue);\n      return;\n    }\n\n    pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);\n    owner.isAndroid = Cleave.Util.isAndroid();\n    owner.lastInputValue = '';\n    owner.isBackward = '';\n    owner.onChangeListener = owner.onChange.bind(owner);\n    owner.onKeyDownListener = owner.onKeyDown.bind(owner);\n    owner.onFocusListener = owner.onFocus.bind(owner);\n    owner.onCutListener = owner.onCut.bind(owner);\n    owner.onCopyListener = owner.onCopy.bind(owner);\n    owner.initSwapHiddenInput();\n    owner.element.addEventListener('input', owner.onChangeListener);\n    owner.element.addEventListener('keydown', owner.onKeyDownListener);\n    owner.element.addEventListener('focus', owner.onFocusListener);\n    owner.element.addEventListener('cut', owner.onCutListener);\n    owner.element.addEventListener('copy', owner.onCopyListener);\n    owner.initPhoneFormatter();\n    owner.initDateFormatter();\n    owner.initTimeFormatter();\n    owner.initNumeralFormatter(); // avoid touch input field if value is null\n    // otherwise Firefox will add red box-shadow for <input required />\n\n    if (pps.initValue || pps.prefix && !pps.noImmediatePrefix) {\n      owner.onInput(pps.initValue);\n    }\n  },\n  initSwapHiddenInput: function () {\n    var owner = this,\n        pps = owner.properties;\n    if (!pps.swapHiddenInput) return;\n    var inputFormatter = owner.element.cloneNode(true);\n    owner.element.parentNode.insertBefore(inputFormatter, owner.element);\n    owner.elementSwapHidden = owner.element;\n    owner.elementSwapHidden.type = 'hidden';\n    owner.element = inputFormatter;\n    owner.element.id = '';\n  },\n  initNumeralFormatter: function () {\n    var owner = this,\n        pps = owner.properties;\n\n    if (!pps.numeral) {\n      return;\n    }\n\n    pps.numeralFormatter = new Cleave.NumeralFormatter(pps.numeralDecimalMark, pps.numeralIntegerScale, pps.numeralDecimalScale, pps.numeralThousandsGroupStyle, pps.numeralPositiveOnly, pps.stripLeadingZeroes, pps.prefix, pps.signBeforePrefix, pps.tailPrefix, pps.delimiter);\n  },\n  initTimeFormatter: function () {\n    var owner = this,\n        pps = owner.properties;\n\n    if (!pps.time) {\n      return;\n    }\n\n    pps.timeFormatter = new Cleave.TimeFormatter(pps.timePattern, pps.timeFormat);\n    pps.blocks = pps.timeFormatter.getBlocks();\n    pps.blocksLength = pps.blocks.length;\n    pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);\n  },\n  initDateFormatter: function () {\n    var owner = this,\n        pps = owner.properties;\n\n    if (!pps.date) {\n      return;\n    }\n\n    pps.dateFormatter = new Cleave.DateFormatter(pps.datePattern, pps.dateMin, pps.dateMax);\n    pps.blocks = pps.dateFormatter.getBlocks();\n    pps.blocksLength = pps.blocks.length;\n    pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);\n  },\n  initPhoneFormatter: function () {\n    var owner = this,\n        pps = owner.properties;\n\n    if (!pps.phone) {\n      return;\n    } // Cleave.AsYouTypeFormatter should be provided by\n    // external google closure lib\n\n\n    try {\n      pps.phoneFormatter = new Cleave.PhoneFormatter(new pps.root.Cleave.AsYouTypeFormatter(pps.phoneRegionCode), pps.delimiter);\n    } catch (ex) {\n      throw new Error('[cleave.js] Please include phone-type-formatter.{country}.js lib');\n    }\n  },\n  onKeyDown: function (event) {\n    var owner = this,\n        charCode = event.which || event.keyCode;\n    owner.lastInputValue = owner.element.value;\n    owner.isBackward = charCode === 8;\n  },\n  onChange: function (event) {\n    var owner = this,\n        pps = owner.properties,\n        Util = Cleave.Util;\n    owner.isBackward = owner.isBackward || event.inputType === 'deleteContentBackward';\n    var postDelimiter = Util.getPostDelimiter(owner.lastInputValue, pps.delimiter, pps.delimiters);\n\n    if (owner.isBackward && postDelimiter) {\n      pps.postDelimiterBackspace = postDelimiter;\n    } else {\n      pps.postDelimiterBackspace = false;\n    }\n\n    this.onInput(this.element.value);\n  },\n  onFocus: function () {\n    var owner = this,\n        pps = owner.properties;\n    owner.lastInputValue = owner.element.value;\n\n    if (pps.prefix && pps.noImmediatePrefix && !owner.element.value) {\n      this.onInput(pps.prefix);\n    }\n\n    Cleave.Util.fixPrefixCursor(owner.element, pps.prefix, pps.delimiter, pps.delimiters);\n  },\n  onCut: function (e) {\n    if (!Cleave.Util.checkFullSelection(this.element.value)) return;\n    this.copyClipboardData(e);\n    this.onInput('');\n  },\n  onCopy: function (e) {\n    if (!Cleave.Util.checkFullSelection(this.element.value)) return;\n    this.copyClipboardData(e);\n  },\n  copyClipboardData: function (e) {\n    var owner = this,\n        pps = owner.properties,\n        Util = Cleave.Util,\n        inputValue = owner.element.value,\n        textToCopy = '';\n\n    if (!pps.copyDelimiter) {\n      textToCopy = Util.stripDelimiters(inputValue, pps.delimiter, pps.delimiters);\n    } else {\n      textToCopy = inputValue;\n    }\n\n    try {\n      if (e.clipboardData) {\n        e.clipboardData.setData('Text', textToCopy);\n      } else {\n        window.clipboardData.setData('Text', textToCopy);\n      }\n\n      e.preventDefault();\n    } catch (ex) {//  empty\n    }\n  },\n  onInput: function (value) {\n    var owner = this,\n        pps = owner.properties,\n        Util = Cleave.Util; // case 1: delete one more character \"4\"\n    // 1234*| -> hit backspace -> 123|\n    // case 2: last character is not delimiter which is:\n    // 12|34* -> hit backspace -> 1|34*\n    // note: no need to apply this for numeral mode\n\n    var postDelimiterAfter = Util.getPostDelimiter(value, pps.delimiter, pps.delimiters);\n\n    if (!pps.numeral && pps.postDelimiterBackspace && !postDelimiterAfter) {\n      value = Util.headStr(value, value.length - pps.postDelimiterBackspace.length);\n    } // phone formatter\n\n\n    if (pps.phone) {\n      if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {\n        pps.result = pps.prefix + pps.phoneFormatter.format(value).slice(pps.prefix.length);\n      } else {\n        pps.result = pps.phoneFormatter.format(value);\n      }\n\n      owner.updateValueState();\n      return;\n    } // numeral formatter\n\n\n    if (pps.numeral) {\n      // Do not show prefix when noImmediatePrefix is specified\n      // This mostly because we need to show user the native input placeholder\n      if (pps.prefix && pps.noImmediatePrefix && value.length === 0) {\n        pps.result = '';\n      } else {\n        pps.result = pps.numeralFormatter.format(value);\n      }\n\n      owner.updateValueState();\n      return;\n    } // date\n\n\n    if (pps.date) {\n      value = pps.dateFormatter.getValidatedDate(value);\n    } // time\n\n\n    if (pps.time) {\n      value = pps.timeFormatter.getValidatedTime(value);\n    } // strip delimiters\n\n\n    value = Util.stripDelimiters(value, pps.delimiter, pps.delimiters); // strip prefix\n\n    value = Util.getPrefixStrippedValue(value, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix); // strip non-numeric characters\n\n    value = pps.numericOnly ? Util.strip(value, /[^\\d]/g) : value; // convert case\n\n    value = pps.uppercase ? value.toUpperCase() : value;\n    value = pps.lowercase ? value.toLowerCase() : value; // prevent from showing prefix when no immediate option enabled with empty input value\n\n    if (pps.prefix) {\n      if (pps.tailPrefix) {\n        value = value + pps.prefix;\n      } else {\n        value = pps.prefix + value;\n      } // no blocks specified, no need to do formatting\n\n\n      if (pps.blocksLength === 0) {\n        pps.result = value;\n        owner.updateValueState();\n        return;\n      }\n    } // update credit card props\n\n\n    if (pps.creditCard) {\n      owner.updateCreditCardPropsByValue(value);\n    } // strip over length characters\n\n\n    value = Util.headStr(value, pps.maxLength); // apply blocks\n\n    pps.result = Util.getFormattedValue(value, pps.blocks, pps.blocksLength, pps.delimiter, pps.delimiters, pps.delimiterLazyShow);\n    owner.updateValueState();\n  },\n  updateCreditCardPropsByValue: function (value) {\n    var owner = this,\n        pps = owner.properties,\n        Util = Cleave.Util,\n        creditCardInfo; // At least one of the first 4 characters has changed\n\n    if (Util.headStr(pps.result, 4) === Util.headStr(value, 4)) {\n      return;\n    }\n\n    creditCardInfo = Cleave.CreditCardDetector.getInfo(value, pps.creditCardStrictMode);\n    pps.blocks = creditCardInfo.blocks;\n    pps.blocksLength = pps.blocks.length;\n    pps.maxLength = Util.getMaxLength(pps.blocks); // credit card type changed\n\n    if (pps.creditCardType !== creditCardInfo.type) {\n      pps.creditCardType = creditCardInfo.type;\n      pps.onCreditCardTypeChanged.call(owner, pps.creditCardType);\n    }\n  },\n  updateValueState: function () {\n    var owner = this,\n        Util = Cleave.Util,\n        pps = owner.properties;\n\n    if (!owner.element) {\n      return;\n    }\n\n    var endPos = owner.element.selectionEnd;\n    var oldValue = owner.element.value;\n    var newValue = pps.result;\n    endPos = Util.getNextCursorPosition(endPos, oldValue, newValue, pps.delimiter, pps.delimiters); // fix Android browser type=\"text\" input field\n    // cursor not jumping issue\n\n    if (owner.isAndroid) {\n      window.setTimeout(function () {\n        owner.element.value = newValue;\n        Util.setSelection(owner.element, endPos, pps.document, false);\n        owner.callOnValueChanged();\n      }, 1);\n      return;\n    }\n\n    owner.element.value = newValue;\n    if (pps.swapHiddenInput) owner.elementSwapHidden.value = owner.getRawValue();\n    Util.setSelection(owner.element, endPos, pps.document, false);\n    owner.callOnValueChanged();\n  },\n  callOnValueChanged: function () {\n    var owner = this,\n        pps = owner.properties;\n    pps.onValueChanged.call(owner, {\n      target: {\n        name: owner.element.name,\n        value: pps.result,\n        rawValue: owner.getRawValue()\n      }\n    });\n  },\n  setPhoneRegionCode: function (phoneRegionCode) {\n    var owner = this,\n        pps = owner.properties;\n    pps.phoneRegionCode = phoneRegionCode;\n    owner.initPhoneFormatter();\n    owner.onChange();\n  },\n  setRawValue: function (value) {\n    var owner = this,\n        pps = owner.properties;\n    value = value !== undefined && value !== null ? value.toString() : '';\n\n    if (pps.numeral) {\n      value = value.replace('.', pps.numeralDecimalMark);\n    }\n\n    pps.postDelimiterBackspace = false;\n    owner.element.value = value;\n    owner.onInput(value);\n  },\n  getRawValue: function () {\n    var owner = this,\n        pps = owner.properties,\n        Util = Cleave.Util,\n        rawValue = owner.element.value;\n\n    if (pps.rawValueTrimPrefix) {\n      rawValue = Util.getPrefixStrippedValue(rawValue, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix);\n    }\n\n    if (pps.numeral) {\n      rawValue = pps.numeralFormatter.getRawValue(rawValue);\n    } else {\n      rawValue = Util.stripDelimiters(rawValue, pps.delimiter, pps.delimiters);\n    }\n\n    return rawValue;\n  },\n  getISOFormatDate: function () {\n    var owner = this,\n        pps = owner.properties;\n    return pps.date ? pps.dateFormatter.getISOFormatDate() : '';\n  },\n  getISOFormatTime: function () {\n    var owner = this,\n        pps = owner.properties;\n    return pps.time ? pps.timeFormatter.getISOFormatTime() : '';\n  },\n  getFormattedValue: function () {\n    return this.element.value;\n  },\n  destroy: function () {\n    var owner = this;\n    owner.element.removeEventListener('input', owner.onChangeListener);\n    owner.element.removeEventListener('keydown', owner.onKeyDownListener);\n    owner.element.removeEventListener('focus', owner.onFocusListener);\n    owner.element.removeEventListener('cut', owner.onCutListener);\n    owner.element.removeEventListener('copy', owner.onCopyListener);\n  },\n  toString: function () {\n    return '[Cleave Object]';\n  }\n};\nCleave.NumeralFormatter = NumeralFormatter_1;\nCleave.DateFormatter = DateFormatter_1;\nCleave.TimeFormatter = TimeFormatter_1;\nCleave.PhoneFormatter = PhoneFormatter_1;\nCleave.CreditCardDetector = CreditCardDetector_1;\nCleave.Util = Util_1;\nCleave.DefaultProperties = DefaultProperties_1; // for angular directive\n\n(typeof commonjsGlobal === 'object' && commonjsGlobal ? commonjsGlobal : window)['Cleave'] = Cleave; // CommonJS\n\nvar Cleave_1 = Cleave;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Cleave_1);\n\n//# sourceURL=webpack://sfra/./node_modules/cleave.js/dist/cleave-esm.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./.tmp/app_delmonte_core/js/paymentInstruments.js");
/******/ 	
/******/ })()
;