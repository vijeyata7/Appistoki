"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger.js"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _helpers = require("../helpers.js");

var _asyncLock = _interopRequireDefault(require("async-lock"));

const BASE_APK = 'base-master.apk';

const LANGUAGE_APK = lang => `base-${lang}.apk`;

const APKS_CACHE = new _lruCache.default({
  max: 10,
  dispose: (apksHash, extractedFilesRoot) => _appiumSupport.fs.rimraf(extractedFilesRoot)
});
const APKS_CACHE_GUARD = new _asyncLock.default();
process.on('exit', () => {
  if (APKS_CACHE.itemCount === 0) {
    return;
  }

  const paths = APKS_CACHE.values();

  _logger.default.debug(`Performing cleanup of ${paths.length} cached .apks ` + _appiumSupport.util.pluralize('package', paths.length));

  for (const appPath of paths) {
    try {
      _appiumSupport.fs.rimrafSync(appPath);
    } catch (e) {
      _logger.default.warn(e.message);
    }
  }
});

async function extractFromApks(apks, dstPath) {
  if (!_lodash.default.isArray(dstPath)) {
    dstPath = [dstPath];
  }

  return await APKS_CACHE_GUARD.acquire(apks, async () => {
    const apksHash = await _appiumSupport.fs.hash(apks);

    _logger.default.debug(`Calculated '${apks}' hash: ${apksHash}`);

    if (APKS_CACHE.has(apksHash)) {
      const resultPath = _path.default.resolve(APKS_CACHE.get(apksHash), ...dstPath);

      if (await _appiumSupport.fs.exists(resultPath)) {
        return resultPath;
      }

      APKS_CACHE.del(apksHash);
    }

    const tmpRoot = await _appiumSupport.tempDir.openDir();

    _logger.default.debug(`Unpacking application bundle at '${apks}' to '${tmpRoot}'`);

    await (0, _helpers.unzipFile)(apks, tmpRoot);

    const resultPath = _path.default.resolve(tmpRoot, ...dstPath);

    if (!(await _appiumSupport.fs.exists(resultPath))) {
      throw new Error(`${dstPath.join(_path.default.sep)} cannot be found in '${apks}' bundle. ` + `Does the archive contain a valid application bundle?`);
    }

    APKS_CACHE.set(apksHash, tmpRoot);
    return resultPath;
  });
}

let apksUtilsMethods = {};

apksUtilsMethods.execBundletool = async function execBundletool(args, errorMsg) {
  await this.initBundletool();
  args = ['-jar', this.binaries.bundletool, ...args];

  _logger.default.debug(`Executing bundletool with arguments: ${JSON.stringify(args)}`);

  let stdout;

  try {
    ({
      stdout
    } = await (0, _teen_process.exec)(await (0, _helpers.getJavaForOs)(), args));

    _logger.default.debug(`Command stdout: ${_lodash.default.truncate(stdout, {
      length: 300
    })}`);

    return stdout;
  } catch (e) {
    if (e.stdout) {
      _logger.default.debug(`Command stdout: ${e.stdout}`);
    }

    if (e.stderr) {
      _logger.default.debug(`Command stderr: ${e.stderr}`);
    }

    throw new Error(`${errorMsg}. Original error: ${e.message}`);
  }
};

apksUtilsMethods.getDeviceSpec = async function getDeviceSpec(specLocation) {
  const args = ['get-device-spec', '--adb', this.executable.path, '--device-id', this.curDeviceId, '--output', specLocation];

  _logger.default.debug(`Getting the spec for the device '${this.curDeviceId}'`);

  await this.execBundletool(args, 'Cannot retrieve the device spec');
  return specLocation;
};

apksUtilsMethods.installMultipleApks = async function installMultipleApks(apkPathsToInstall, options = {}) {
  const installArgs = (0, _helpers.buildInstallArgs)(await this.getApiLevel(), options);
  return await this.adbExec(['install-multiple', ...installArgs, ...apkPathsToInstall], {
    timeout: options.timeout,
    timeoutCapName: options.timeoutCapName
  });
};

apksUtilsMethods.installApks = async function installApks(apks, options = {}) {
  options = _lodash.default.cloneDeep(options);

  _lodash.default.defaults(options, {
    timeout: this.adbExecTimeout === _helpers.DEFAULT_ADB_EXEC_TIMEOUT ? _helpers.APKS_INSTALL_TIMEOUT : this.adbExecTimeout,
    timeoutCapName: 'androidInstallTimeout'
  });

  Object.assign(options, {
    replace: true
  });
  const tmpRoot = await _appiumSupport.tempDir.openDir();

  try {
    const specPath = await this.getDeviceSpec(_path.default.resolve(tmpRoot, 'deviceSpec.json'));
    const args = ['extract-apks', '--apks', apks, '--output-dir', tmpRoot, '--device-spec', specPath];

    _logger.default.debug(`Extracting the apk files from '${apks}'`);

    await this.execBundletool(args, `Cannot extract the application bundle at '${apks}'`);
    const apkPathsToInstall = (await _appiumSupport.fs.readdir(tmpRoot)).filter(name => name.endsWith(_helpers.APK_EXTENSION)).map(name => _path.default.resolve(tmpRoot, name));

    _logger.default.debug('Got the following apk files to install: ' + JSON.stringify(apkPathsToInstall.map(x => _path.default.basename(x))));

    const output = await this.installMultipleApks(apkPathsToInstall, options);
    const truncatedOutput = !_lodash.default.isString(output) || output.length <= 300 ? output : `${output.substr(0, 150)}...${output.substr(output.length - 150)}`;

    _logger.default.debug(`Install command stdout: ${truncatedOutput}`);

    if (_lodash.default.includes(output, 'INSTALL_FAILED')) {
      throw new Error(output);
    }
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
};

apksUtilsMethods.extractBaseApk = async function extractBaseApk(apks) {
  return await extractFromApks(apks, ['splits', BASE_APK]);
};

apksUtilsMethods.extractLanguageApk = async function extractLanguageApk(apks, language = null) {
  if (language) {
    try {
      return await extractFromApks(apks, ['splits', LANGUAGE_APK(language)]);
    } catch (e) {
      _logger.default.debug(e.message);

      _logger.default.info(`Assuming that splitting by language is not enabled for the '${apks}' bundle ` + `and returning the main apk instead`);

      return await this.extractBaseApk(apks);
    }
  }

  const defaultLanguages = ['en', 'en_us'];

  for (const lang of defaultLanguages) {
    try {
      return await extractFromApks(apks, ['splits', LANGUAGE_APK(lang)]);
    } catch (ign) {}
  }

  _logger.default.info(`Cannot find any split apk for the default languages ${JSON.stringify(defaultLanguages)}. ` + `Returning the main apk instead.`);

  return await this.extractBaseApk(apks);
};

apksUtilsMethods.isTestPackageOnlyError = function (output) {
  return /\[INSTALL_FAILED_TEST_ONLY\]/.test(output);
};

var _default = apksUtilsMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
