"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IOSCrashLog = void 0;

require("source-map-support/register");

var _appiumIosDriver = require("appium-ios-driver");

var _appiumSupport = require("appium-support");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumIosDevice = require("appium-ios-device");

var _path = _interopRequireDefault(require("path"));

class IOSCrashLog extends _appiumIosDriver.IOSCrashLog {
  constructor(opts = {}) {
    super(opts.udid ? _path.default.resolve(process.env.HOME, 'Library', 'Logs', 'CrashReporter', 'MobileDevice') : _path.default.resolve(process.env.HOME, 'Library', 'Logs', 'DiagnosticReports'));
    this.udid = opts.udid;
    this.phoneName = null;
    this.sim = opts.sim;
  }

  async getCrashes() {
    let crashLogsRoot = this.logDir;

    if (this.udid) {
      this.phoneName = this.phoneName || (await _appiumIosDevice.utilities.getDeviceName(this.udid));
      crashLogsRoot = _path.default.resolve(crashLogsRoot, this.phoneName);
    }

    if (!(await _appiumSupport.fs.exists(crashLogsRoot))) {
      _logger.default.debug(`Crash reports root '${crashLogsRoot}' does not exist. Got nothing to gather.`);

      return [];
    }

    const foundFiles = await _appiumSupport.fs.glob(`${crashLogsRoot}/**/*.crash`, {
      strict: false
    });

    if (this.udid) {
      return foundFiles;
    }

    return await _bluebird.default.filter(foundFiles, async x => {
      try {
        const content = await _appiumSupport.fs.readFile(x, 'utf8');
        return content.toUpperCase().includes(this.sim.udid.toUpperCase());
      } catch (err) {
        return false;
      }
    });
  }

  async filesToJSON(paths) {
    return await _bluebird.default.map(paths, async fullPath => {
      const stat = await _appiumSupport.fs.stat(fullPath);
      return {
        timestamp: stat.ctime.getTime(),
        level: 'ALL',
        message: await _appiumSupport.fs.readFile(fullPath, 'utf8')
      };
    });
  }

}

exports.IOSCrashLog = IOSCrashLog;
var _default = IOSCrashLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL2lvcy1jcmFzaC1sb2cuanMiXSwibmFtZXMiOlsiSU9TQ3Jhc2hMb2ciLCJJT1NEcml2ZXJJT1NDcmFzaExvZyIsImNvbnN0cnVjdG9yIiwib3B0cyIsInVkaWQiLCJwYXRoIiwicmVzb2x2ZSIsInByb2Nlc3MiLCJlbnYiLCJIT01FIiwicGhvbmVOYW1lIiwic2ltIiwiZ2V0Q3Jhc2hlcyIsImNyYXNoTG9nc1Jvb3QiLCJsb2dEaXIiLCJ1dGlsaXRpZXMiLCJnZXREZXZpY2VOYW1lIiwiZnMiLCJleGlzdHMiLCJsb2ciLCJkZWJ1ZyIsImZvdW5kRmlsZXMiLCJnbG9iIiwic3RyaWN0IiwiQiIsImZpbHRlciIsIngiLCJjb250ZW50IiwicmVhZEZpbGUiLCJ0b1VwcGVyQ2FzZSIsImluY2x1ZGVzIiwiZXJyIiwiZmlsZXNUb0pTT04iLCJwYXRocyIsIm1hcCIsImZ1bGxQYXRoIiwic3RhdCIsInRpbWVzdGFtcCIsImN0aW1lIiwiZ2V0VGltZSIsImxldmVsIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxXQUFOLFNBQTBCQyw0QkFBMUIsQ0FBK0M7QUFDN0NDLEVBQUFBLFdBQVcsQ0FBRUMsSUFBSSxHQUFHLEVBQVQsRUFBYTtBQUN0QixVQUFNQSxJQUFJLENBQUNDLElBQUwsR0FDSkMsY0FBS0MsT0FBTCxDQUFhQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsSUFBekIsRUFBK0IsU0FBL0IsRUFBMEMsTUFBMUMsRUFBa0QsZUFBbEQsRUFBbUUsY0FBbkUsQ0FESSxHQUVKSixjQUFLQyxPQUFMLENBQWFDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxJQUF6QixFQUErQixTQUEvQixFQUEwQyxNQUExQyxFQUFrRCxtQkFBbEQsQ0FGRjtBQUdBLFNBQUtMLElBQUwsR0FBWUQsSUFBSSxDQUFDQyxJQUFqQjtBQUNBLFNBQUtNLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxTQUFLQyxHQUFMLEdBQVdSLElBQUksQ0FBQ1EsR0FBaEI7QUFDRDs7QUFFZSxRQUFWQyxVQUFVLEdBQUk7QUFDbEIsUUFBSUMsYUFBYSxHQUFHLEtBQUtDLE1BQXpCOztBQUNBLFFBQUksS0FBS1YsSUFBVCxFQUFlO0FBQ2IsV0FBS00sU0FBTCxHQUFpQixLQUFLQSxTQUFMLEtBQWtCLE1BQU1LLDJCQUFVQyxhQUFWLENBQXdCLEtBQUtaLElBQTdCLENBQXhCLENBQWpCO0FBQ0FTLE1BQUFBLGFBQWEsR0FBR1IsY0FBS0MsT0FBTCxDQUFhTyxhQUFiLEVBQTRCLEtBQUtILFNBQWpDLENBQWhCO0FBQ0Q7O0FBQ0QsUUFBSSxFQUFDLE1BQU1PLGtCQUFHQyxNQUFILENBQVVMLGFBQVYsQ0FBUCxDQUFKLEVBQXFDO0FBQ25DTSxzQkFBSUMsS0FBSixDQUFXLHVCQUFzQlAsYUFBYywwQ0FBL0M7O0FBQ0EsYUFBTyxFQUFQO0FBQ0Q7O0FBQ0QsVUFBTVEsVUFBVSxHQUFHLE1BQU1KLGtCQUFHSyxJQUFILENBQVMsR0FBRVQsYUFBYyxhQUF6QixFQUF1QztBQUM5RFUsTUFBQUEsTUFBTSxFQUFFO0FBRHNELEtBQXZDLENBQXpCOztBQUdBLFFBQUksS0FBS25CLElBQVQsRUFBZTtBQUNiLGFBQU9pQixVQUFQO0FBQ0Q7O0FBRUQsV0FBTyxNQUFNRyxrQkFBRUMsTUFBRixDQUFTSixVQUFULEVBQXFCLE1BQU9LLENBQVAsSUFBYTtBQUM3QyxVQUFJO0FBQ0YsY0FBTUMsT0FBTyxHQUFHLE1BQU1WLGtCQUFHVyxRQUFILENBQVlGLENBQVosRUFBZSxNQUFmLENBQXRCO0FBQ0EsZUFBT0MsT0FBTyxDQUFDRSxXQUFSLEdBQXNCQyxRQUF0QixDQUErQixLQUFLbkIsR0FBTCxDQUFTUCxJQUFULENBQWN5QixXQUFkLEVBQS9CLENBQVA7QUFDRCxPQUhELENBR0UsT0FBT0UsR0FBUCxFQUFZO0FBQ1osZUFBTyxLQUFQO0FBQ0Q7QUFDRixLQVBZLENBQWI7QUFRRDs7QUFFZ0IsUUFBWEMsV0FBVyxDQUFFQyxLQUFGLEVBQVM7QUFDeEIsV0FBTyxNQUFNVCxrQkFBRVUsR0FBRixDQUFNRCxLQUFOLEVBQWEsTUFBT0UsUUFBUCxJQUFvQjtBQUM1QyxZQUFNQyxJQUFJLEdBQUcsTUFBTW5CLGtCQUFHbUIsSUFBSCxDQUFRRCxRQUFSLENBQW5CO0FBQ0EsYUFBTztBQUNMRSxRQUFBQSxTQUFTLEVBQUVELElBQUksQ0FBQ0UsS0FBTCxDQUFXQyxPQUFYLEVBRE47QUFFTEMsUUFBQUEsS0FBSyxFQUFFLEtBRkY7QUFHTEMsUUFBQUEsT0FBTyxFQUFFLE1BQU14QixrQkFBR1csUUFBSCxDQUFZTyxRQUFaLEVBQXNCLE1BQXRCO0FBSFYsT0FBUDtBQUtELEtBUFksQ0FBYjtBQVFEOztBQTlDNEM7OztlQWtEaENuQyxXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSU9TQ3Jhc2hMb2cgYXMgSU9TRHJpdmVySU9TQ3Jhc2hMb2cgfSBmcm9tICdhcHBpdW0taW9zLWRyaXZlcic7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IHV0aWxpdGllcyB9IGZyb20gJ2FwcGl1bS1pb3MtZGV2aWNlJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jbGFzcyBJT1NDcmFzaExvZyBleHRlbmRzIElPU0RyaXZlcklPU0NyYXNoTG9nIHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMudWRpZCA/XG4gICAgICBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuSE9NRSwgJ0xpYnJhcnknLCAnTG9ncycsICdDcmFzaFJlcG9ydGVyJywgJ01vYmlsZURldmljZScpIDpcbiAgICAgIHBhdGgucmVzb2x2ZShwcm9jZXNzLmVudi5IT01FLCAnTGlicmFyeScsICdMb2dzJywgJ0RpYWdub3N0aWNSZXBvcnRzJykpO1xuICAgIHRoaXMudWRpZCA9IG9wdHMudWRpZDtcbiAgICB0aGlzLnBob25lTmFtZSA9IG51bGw7XG4gICAgdGhpcy5zaW0gPSBvcHRzLnNpbTtcbiAgfVxuXG4gIGFzeW5jIGdldENyYXNoZXMgKCkge1xuICAgIGxldCBjcmFzaExvZ3NSb290ID0gdGhpcy5sb2dEaXI7XG4gICAgaWYgKHRoaXMudWRpZCkge1xuICAgICAgdGhpcy5waG9uZU5hbWUgPSB0aGlzLnBob25lTmFtZSB8fCBhd2FpdCB1dGlsaXRpZXMuZ2V0RGV2aWNlTmFtZSh0aGlzLnVkaWQpO1xuICAgICAgY3Jhc2hMb2dzUm9vdCA9IHBhdGgucmVzb2x2ZShjcmFzaExvZ3NSb290LCB0aGlzLnBob25lTmFtZSk7XG4gICAgfVxuICAgIGlmICghYXdhaXQgZnMuZXhpc3RzKGNyYXNoTG9nc1Jvb3QpKSB7XG4gICAgICBsb2cuZGVidWcoYENyYXNoIHJlcG9ydHMgcm9vdCAnJHtjcmFzaExvZ3NSb290fScgZG9lcyBub3QgZXhpc3QuIEdvdCBub3RoaW5nIHRvIGdhdGhlci5gKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgZm91bmRGaWxlcyA9IGF3YWl0IGZzLmdsb2IoYCR7Y3Jhc2hMb2dzUm9vdH0vKiovKi5jcmFzaGAsIHtcbiAgICAgIHN0cmljdDogZmFsc2VcbiAgICB9KTtcbiAgICBpZiAodGhpcy51ZGlkKSB7XG4gICAgICByZXR1cm4gZm91bmRGaWxlcztcbiAgICB9XG4gICAgLy8gRm9yIFNpbXVsYXRvciBvbmx5IGluY2x1ZGUgZmlsZXMsIHRoYXQgY29udGFpbiBjdXJyZW50IFVESURcbiAgICByZXR1cm4gYXdhaXQgQi5maWx0ZXIoZm91bmRGaWxlcywgYXN5bmMgKHgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZSh4LCAndXRmOCcpO1xuICAgICAgICByZXR1cm4gY29udGVudC50b1VwcGVyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuc2ltLnVkaWQudG9VcHBlckNhc2UoKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZmlsZXNUb0pTT04gKHBhdGhzKSB7XG4gICAgcmV0dXJuIGF3YWl0IEIubWFwKHBhdGhzLCBhc3luYyAoZnVsbFBhdGgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXQgPSBhd2FpdCBmcy5zdGF0KGZ1bGxQYXRoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRpbWVzdGFtcDogc3RhdC5jdGltZS5nZXRUaW1lKCksXG4gICAgICAgIGxldmVsOiAnQUxMJyxcbiAgICAgICAgbWVzc2FnZTogYXdhaXQgZnMucmVhZEZpbGUoZnVsbFBhdGgsICd1dGY4JylcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgSU9TQ3Jhc2hMb2cgfTtcbmV4cG9ydCBkZWZhdWx0IElPU0NyYXNoTG9nO1xuIl0sImZpbGUiOiJsaWIvZGV2aWNlLWxvZy9pb3MtY3Jhc2gtbG9nLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
