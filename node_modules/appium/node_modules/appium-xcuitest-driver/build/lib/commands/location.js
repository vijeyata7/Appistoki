"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _appiumIosDevice = require("appium-ios-device");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {};
exports.commands = commands;

commands.getGeoLocation = async function getGeoLocation() {
  const {
    authorizationStatus,
    latitude,
    longitude,
    altitude
  } = await this.proxyCommand('/wda/device/location', 'GET');

  if (authorizationStatus !== 3) {
    _logger.default.errorAndThrow(`Location service must be set to 'Always' in order to ` + `retrive the current geolocation data. Please set it up manually via ` + `'Settings > Privacy > Location Services -> WebDriverAgentRunner-Runner'`);
  }

  return {
    latitude,
    longitude,
    altitude
  };
};

commands.setGeoLocation = async function setGeoLocation(location) {
  let {
    latitude,
    longitude
  } = location;

  if (!_appiumSupport.util.hasValue(latitude) || !_appiumSupport.util.hasValue(longitude)) {
    _logger.default.errorAndThrow(`Both latitude and longitude should be set`);
  }

  if (this.isSimulator()) {
    await this.opts.device.setGeolocation(`${latitude}`, `${longitude}`);
    return;
  }

  const service = await _appiumIosDevice.services.startSimulateLocationService(this.opts.udid);

  try {
    service.setLocation(latitude, longitude);
  } catch (e) {
    _logger.default.errorAndThrow(`Can't set the location on device '${this.opts.udid}'. Original error: ${e.message}`);
  } finally {
    service.close();
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2NhdGlvbi5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImdldEdlb0xvY2F0aW9uIiwiYXV0aG9yaXphdGlvblN0YXR1cyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiYWx0aXR1ZGUiLCJwcm94eUNvbW1hbmQiLCJsb2ciLCJlcnJvckFuZFRocm93Iiwic2V0R2VvTG9jYXRpb24iLCJsb2NhdGlvbiIsInV0aWwiLCJoYXNWYWx1ZSIsImlzU2ltdWxhdG9yIiwib3B0cyIsImRldmljZSIsInNldEdlb2xvY2F0aW9uIiwic2VydmljZSIsInNlcnZpY2VzIiwic3RhcnRTaW11bGF0ZUxvY2F0aW9uU2VydmljZSIsInVkaWQiLCJzZXRMb2NhdGlvbiIsImUiLCJtZXNzYWdlIiwiY2xvc2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7OztBQXVCQUEsUUFBUSxDQUFDQyxjQUFULEdBQTBCLGVBQWVBLGNBQWYsR0FBaUM7QUFDekQsUUFBTTtBQUNKQyxJQUFBQSxtQkFESTtBQUVKQyxJQUFBQSxRQUZJO0FBR0pDLElBQUFBLFNBSEk7QUFJSkMsSUFBQUE7QUFKSSxNQUtGLE1BQU0sS0FBS0MsWUFBTCxDQUFrQixzQkFBbEIsRUFBMEMsS0FBMUMsQ0FMVjs7QUFTQSxNQUFJSixtQkFBbUIsS0FBSyxDQUE1QixFQUErQjtBQUM3Qkssb0JBQUlDLGFBQUosQ0FBbUIsdURBQUQsR0FDZixzRUFEZSxHQUVmLHlFQUZIO0FBR0Q7O0FBRUQsU0FBTztBQUFDTCxJQUFBQSxRQUFEO0FBQVdDLElBQUFBLFNBQVg7QUFBc0JDLElBQUFBO0FBQXRCLEdBQVA7QUFDRCxDQWpCRDs7QUFtQkFMLFFBQVEsQ0FBQ1MsY0FBVCxHQUEwQixlQUFlQSxjQUFmLENBQStCQyxRQUEvQixFQUF5QztBQUNqRSxNQUFJO0FBQUNQLElBQUFBLFFBQUQ7QUFBV0MsSUFBQUE7QUFBWCxNQUF3Qk0sUUFBNUI7O0FBRUEsTUFBSSxDQUFDQyxvQkFBS0MsUUFBTCxDQUFjVCxRQUFkLENBQUQsSUFBNEIsQ0FBQ1Esb0JBQUtDLFFBQUwsQ0FBY1IsU0FBZCxDQUFqQyxFQUEyRDtBQUN6REcsb0JBQUlDLGFBQUosQ0FBbUIsMkNBQW5CO0FBQ0Q7O0FBRUQsTUFBSSxLQUFLSyxXQUFMLEVBQUosRUFBd0I7QUFDdEIsVUFBTSxLQUFLQyxJQUFMLENBQVVDLE1BQVYsQ0FBaUJDLGNBQWpCLENBQWlDLEdBQUViLFFBQVMsRUFBNUMsRUFBZ0QsR0FBRUMsU0FBVSxFQUE1RCxDQUFOO0FBQ0E7QUFDRDs7QUFFRCxRQUFNYSxPQUFPLEdBQUcsTUFBTUMsMEJBQVNDLDRCQUFULENBQXNDLEtBQUtMLElBQUwsQ0FBVU0sSUFBaEQsQ0FBdEI7O0FBQ0EsTUFBSTtBQUNGSCxJQUFBQSxPQUFPLENBQUNJLFdBQVIsQ0FBb0JsQixRQUFwQixFQUE4QkMsU0FBOUI7QUFDRCxHQUZELENBRUUsT0FBT2tCLENBQVAsRUFBVTtBQUNWZixvQkFBSUMsYUFBSixDQUFtQixxQ0FBb0MsS0FBS00sSUFBTCxDQUFVTSxJQUFLLHNCQUFxQkUsQ0FBQyxDQUFDQyxPQUFRLEVBQXJHO0FBQ0QsR0FKRCxTQUlVO0FBQ1JOLElBQUFBLE9BQU8sQ0FBQ08sS0FBUjtBQUNEO0FBQ0YsQ0FwQkQ7O2VBdUJleEIsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlcnZpY2VzIH0gZnJvbSAnYXBwaXVtLWlvcy1kZXZpY2UnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxubGV0IGNvbW1hbmRzID0ge307XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTG9jYXRpb25PYmplY3RcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGF0aXR1ZGUgLSBUaGUgbGF0aXR1ZGUgb2YgdGhlIGRldmljZSB1bmRlciB0ZXN0XG4gKiBAcHJvcGVydHkge251bWJlcn0gbG9uZ2l0dWRlIC0gVGhlIGxvbmdpdHVkZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3RcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBhbHRpdHVkZSAtIFRoZSBhbHRpdHVkZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3RcbiAqL1xuXG4vKipcbiAqIFJldHVybnMgbG9jYXRpb24gb2YgdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICogVGhlIGRldmljZSB1bmRlciB0ZXN0IG11c3QgYWxsb3cgdGhlIGxvY2F0aW9uIHNlcnZpY2VzIGZvciBXREFcbiAqIGFzICdBbHdheXMnIHRvIGdldCB0aGUgbG9jYXRpb24gZGF0YSBjb3JyZWN0bHkuXG4gKlxuICogVGhlICdsYXRpdHVkZScsICdsb25naXR1ZGUnIGFuZCAnYWx0aXR1ZGUnIGNvdWxkIGJlIHplcm8gZXZlblxuICogaWYgdGhlIExvY2F0aW9uIFNlcnZpY2VzIGFyZSBzZXQgdG8gJ0Fsd2F5cycsIGJlY2F1c2UgdGhlIGRldmljZVxuICogbmVlZHMgc29tZSB0aW1lIHRvIHVwZGF0ZSB0aGUgbG9jYXRpb24gZGF0YS5cbiAqXG4gKiBAcmV0dXJucyB7TG9jYXRpb25PYmplY3R9XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGRldmljZSB1bmRlciB0ZXN0IHJldHVybnMgYW4gZXJyb3IgbWVzc2FnZS5cbiAqICAgICAgICAgICAgICAgICBpLmUuOiB0dk9TIHJldHVybnMgdW5zdXBwb3J0ZWQgZXJyb3JcbiAqL1xuY29tbWFuZHMuZ2V0R2VvTG9jYXRpb24gPSBhc3luYyBmdW5jdGlvbiBnZXRHZW9Mb2NhdGlvbiAoKSB7XG4gIGNvbnN0IHtcbiAgICBhdXRob3JpemF0aW9uU3RhdHVzLFxuICAgIGxhdGl0dWRlLFxuICAgIGxvbmdpdHVkZSxcbiAgICBhbHRpdHVkZVxuICB9ID0gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEvZGV2aWNlL2xvY2F0aW9uJywgJ0dFVCcpO1xuXG4gIC8vICczJyBpcyAnQWx3YXlzJyBpbiB0aGUgcHJpdmFjeVxuICAvLyBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9jb3JlbG9jYXRpb24vY2xhdXRob3JpemF0aW9uc3RhdHVzXG4gIGlmIChhdXRob3JpemF0aW9uU3RhdHVzICE9PSAzKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYExvY2F0aW9uIHNlcnZpY2UgbXVzdCBiZSBzZXQgdG8gJ0Fsd2F5cycgaW4gb3JkZXIgdG8gYCArXG4gICAgICBgcmV0cml2ZSB0aGUgY3VycmVudCBnZW9sb2NhdGlvbiBkYXRhLiBQbGVhc2Ugc2V0IGl0IHVwIG1hbnVhbGx5IHZpYSBgICtcbiAgICAgIGAnU2V0dGluZ3MgPiBQcml2YWN5ID4gTG9jYXRpb24gU2VydmljZXMgLT4gV2ViRHJpdmVyQWdlbnRSdW5uZXItUnVubmVyJ2ApO1xuICB9XG5cbiAgcmV0dXJuIHtsYXRpdHVkZSwgbG9uZ2l0dWRlLCBhbHRpdHVkZX07XG59O1xuXG5jb21tYW5kcy5zZXRHZW9Mb2NhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIHNldEdlb0xvY2F0aW9uIChsb2NhdGlvbikge1xuICBsZXQge2xhdGl0dWRlLCBsb25naXR1ZGV9ID0gbG9jYXRpb247XG5cbiAgaWYgKCF1dGlsLmhhc1ZhbHVlKGxhdGl0dWRlKSB8fCAhdXRpbC5oYXNWYWx1ZShsb25naXR1ZGUpKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYEJvdGggbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBzaG91bGQgYmUgc2V0YCk7XG4gIH1cblxuICBpZiAodGhpcy5pc1NpbXVsYXRvcigpKSB7XG4gICAgYXdhaXQgdGhpcy5vcHRzLmRldmljZS5zZXRHZW9sb2NhdGlvbihgJHtsYXRpdHVkZX1gLCBgJHtsb25naXR1ZGV9YCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgc2VydmljZSA9IGF3YWl0IHNlcnZpY2VzLnN0YXJ0U2ltdWxhdGVMb2NhdGlvblNlcnZpY2UodGhpcy5vcHRzLnVkaWQpO1xuICB0cnkge1xuICAgIHNlcnZpY2Uuc2V0TG9jYXRpb24obGF0aXR1ZGUsIGxvbmdpdHVkZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQ2FuJ3Qgc2V0IHRoZSBsb2NhdGlvbiBvbiBkZXZpY2UgJyR7dGhpcy5vcHRzLnVkaWR9Jy4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9IGZpbmFsbHkge1xuICAgIHNlcnZpY2UuY2xvc2UoKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvbG9jYXRpb24uanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
