"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YouiEngineDriver = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _desiredCaps = require("./desired-caps");

var _logger = _interopRequireDefault(require("./logger"));

var _commands = _interopRequireDefault(require("./commands"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncbox = require("asyncbox");

var _appiumUiautomator2Driver = _interopRequireDefault(require("appium-uiautomator2-driver"));

var _appiumXcuitestDriver = _interopRequireDefault(require("appium-xcuitest-driver"));

var _appiumMacDriver = _interopRequireDefault(require("appium-mac-driver"));

var _bluesky = _interopRequireDefault(require("./bluesky"));

var _tvos = _interopRequireDefault(require("./tvos"));

var _tvossimulator = _interopRequireDefault(require("./tvossimulator"));

var _yimac = _interopRequireDefault(require("./yimac"));

var _yilinux = _interopRequireDefault(require("./yilinux"));

const TO_PROXY_COMMON = ['background', 'closeApp', 'getLog', 'getLogTypes', 'getOrientation', 'getStrings', 'installApp', 'launchApp', 'lock', 'removeApp', 'setOrientation'];
const TO_PROXY_IOS_ONLY = ['mobileShake'];
const TO_PROXY_ANDROID_ONLY = ['getNetworkConnection', 'isAppInstalled', 'isLocked', 'longPressKeyCode', 'pressKeyCode', 'setNetworkConnection', 'toggleLocationServices', 'unlock'];
const TO_PROXY_IOS = TO_PROXY_IOS_ONLY.concat(TO_PROXY_COMMON);
const TO_PROXY_ANDROID = TO_PROXY_ANDROID_ONLY.concat(TO_PROXY_COMMON);
const TO_PROXY_MAC = TO_PROXY_COMMON;
const MAX_RETRY_COUNT = 3;
const SOCKET_TIMEOUT = 10000;

class YouiEngineDriver extends _appiumBaseDriver.BaseDriver {
  resetYouiEngine() {
    this.ready = false;
    this.socket = null;
    this.locatorStrategies = ['id', 'name', 'class name', 'accessibility id'];
    this.proxydriver = null;
    this.proxyAllowList = '';
    this.proxyAll = false;
    this.device = null;
  }

  constructor(opts, shouldValidateCaps) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.desiredCapConstraints;
    this.settings = new _appiumBaseDriver.DeviceSettings({
      'TimeDilation': 1,
      'SourceTreeFilter': ''
    }, this.onSettingsUpdate.bind(this));
    this.resetYouiEngine();
  }

  validateLocatorStrategy(strategy) {
    super.validateLocatorStrategy(strategy, false);
  }

  async createSession(caps) {
    try {
      let [sessionId] = await super.createSession(caps);

      if (caps.platformName !== null) {
        let appPlatform = caps.platformName.toLowerCase();

        switch (appPlatform) {
          case 'ios':
          case 'tvos':
            await this.startXCUITestSession(caps);
            break;

          case 'android':
            await this.startAndroidSession(caps);
            break;

          case 'mac':
            await this.startMacSession(caps);
            break;

          case 'yimac':
            this.device = new _yimac.default();
            await this.device.startSession(caps);
            break;

          case 'yilinux':
            this.device = new _yilinux.default();
            await this.device.startSession(caps);
            break;

          case 'bluesky':
            this.device = new _bluesky.default();
            await this.device.startSession(caps);
            break;

          case 'yitvos':
            {
              let shell = require('shelljs');

              if (shell.exec(`instruments -s devices | grep '${caps.udid}'`).includes('(Simulator)')) {
                this.device = new _tvossimulator.default();
              } else {
                this.device = new _tvos.default();
              }

              await this.device.startSession(caps, this);
              break;
            }

          case 'noproxy':
          case 'connecttoapp':
            break;

          default:
            _logger.default.errorAndThrow(`Unsupported platformName: ${caps.platformName}`);

        }
      }

      await this.connectSocket();

      if (caps.fullSourceTree === true) {} else {
        _logger.default.debug('Setting SourceTreeFilter to displayed elements only');

        await this.updateSettings({
          SourceTreeFilter: "[@isDisplayed='true']"
        });
      }

      return [sessionId, this.opts];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }

  async onSettingsUpdate(key, value) {
    if (key === 'TimeDilation') {
      await this.setTimeDilation(value);
    } else if (key === 'SourceTreeFilter') {
      await this.setSourceTreeFilter(value);
    }
  }

  async stop() {
    this.ready = false;
  }

  async deleteSession() {
    _logger.default.debug('Deleting YouiEngine session');

    if (this.caps.platformName !== null) {
      let appPlatform = this.caps.platformName.toLowerCase();

      if (['yimac', 'yitvos', 'bluesky', 'yilinux'].includes(appPlatform)) {
        if (this.device) {
          this.device.endSession();
        }
      }
    }

    if (this.proxydriver !== null) {
      await this.proxydriver.deleteSession();
    }

    this.socket.end();
    this.socket.destroy();
    await super.deleteSession();
    await this.stop();
  }

  driverShouldDoProxyCmd(command) {
    if (!this.proxydriver) {
      return false;
    }

    if (this.proxyAll) {
      return true;
    }

    for (let allowedCommand of this.proxyAllowList) {
      if (allowedCommand === command) {
        return true;
      }
    }

    return false;
  }

  async executeCommand(cmd, ...args) {
    if (cmd === 'receiveAsyncResponse') {
      _logger.default.debug(`Executing YouiEngineDriver response '${cmd}'`);

      return await this.receiveAsyncResponse(...args);
    }

    if (this.ready) {
      if (this.driverShouldDoProxyCmd(cmd)) {
        _logger.default.debug(`Executing proxied WebDriver command '${cmd}'`);

        if (cmd === 'setContext' && args[0] === 'YOUI_APP') {
          this.proxyAll = false;
          return await this.executeCommand(cmd, ...args);
        }

        this.clearNewCommandTimeout();
        let result = this.proxydriver.executeCommand(cmd, ...args);
        this.startNewCommandTimeout(cmd);
        return result;
      } else {
        _logger.default.debug(`Executing YouiEngine WebDriver command '${cmd}'`);

        return await super.executeCommand(cmd, ...args);
      }
    } else {
      _logger.default.debug(`Command Error '${cmd}'`);

      throw new _appiumBaseDriver.errors.NoSuchDriverError(`Driver is not ready, cannot execute ${cmd}.`);
    }
  }

  validateDesiredCaps(caps) {
    let res = super.validateDesiredCaps(caps);

    if (!res) {
      return res;
    }

    if (!caps.youiEngineAppAddress) {
      let msg = 'The desired capabilities must include youiEngineAppAddress';

      _logger.default.errorAndThrow(msg);
    }

    if (caps.platformName.toLowerCase() !== 'connecttoapp' && caps.platformName.toLowerCase() !== 'noproxy') {
      if (!caps.app) {
        let msg = 'The desired capabilities must include app';

        _logger.default.errorAndThrow(msg);
      }

      const fs = require('fs');

      const path = require('path');

      if (!fs.existsSync(caps.app)) {
        let absolutepath = path.resolve(caps.app);
        let msg = 'The app could not be found in following location: ' + absolutepath;

        _logger.default.errorAndThrow(msg);
      }

      if (caps.deviceName.toLowerCase() === 'android') {
        if (!caps.avd) {
          let msg = 'The desired capabilities must include avd';

          _logger.default.errorAndThrow(msg);
        }
      }
    }

    return true;
  }

  async setupNewXCUITestDriver(caps) {
    let args = {
      javascriptEnabled: true
    };
    args = Object.assign(this.opts, args);
    let driver = new _appiumXcuitestDriver.default(args);

    let capsCopy = _lodash.default.cloneDeep(caps);

    capsCopy.newCommandTimeout = 0;
    await driver.createSession(capsCopy);
    return driver;
  }

  async startXCUITestSession(caps) {
    _logger.default.info('Starting an IOS proxy session');

    this.proxyAllowList = TO_PROXY_IOS;
    this.proxydriver = await this.setupNewXCUITestDriver(caps);
  }

  async setupNewAndroidDriver(caps) {
    let androidArgs = { ...this.opts,
      javascriptEnabled: true
    };
    let androiddriver = new _appiumUiautomator2Driver.default(androidArgs);
    this.setSecurityOptions(androiddriver);

    let capsCopy = _lodash.default.cloneDeep(caps);

    capsCopy.newCommandTimeout = 0;
    await androiddriver.createSession(capsCopy);
    return androiddriver;
  }

  async startAndroidSession(caps) {
    _logger.default.info('Starting an Android proxy session');

    this.proxyAllowList = TO_PROXY_ANDROID;
    this.proxydriver = await this.setupNewAndroidDriver(caps);
  }

  async setupNewMacDriver(caps) {
    let macArgs = {
      javascriptEnabled: true
    };
    let macdriver = new _appiumMacDriver.default(macArgs);

    let capsCopy = _lodash.default.cloneDeep(caps);

    capsCopy.newCommandTimeout = 0;
    await macdriver.createSession(capsCopy);
    return macdriver;
  }

  async startMacSession(caps) {
    _logger.default.info('Starting a Mac proxy session');

    this.proxyAllowList = TO_PROXY_MAC;
    this.proxydriver = await this.setupNewMacDriver(caps);
  }

  setSecurityOptions(driver) {
    if (this.relaxedSecurityEnabled) {
      driver.relaxedSecurityEnabled = this.relaxedSecurityEnabled;
    }

    if (this.denyInsecure) {
      driver.denyInsecure = this.denyInsecure;
    }

    if (this.allowInsecure) {
      driver.allowInsecure = this.allowInsecure;
    }
  }

  async connectSocket() {
    let retryCount = 0;
    let connected = false;
    let errno = 'EOK';

    while (retryCount < MAX_RETRY_COUNT && !connected) {
      _logger.default.info('Attempt #' + (retryCount + 1));

      let connectedPromise = new _bluebird.default(resolve => {
        let net = require('net');

        let HOST = this.opts.youiEngineAppAddress;
        let PORT;

        if (this.caps.youiEngineAppPort) {
          PORT = this.caps.youiEngineAppPort;
        } else if (this.caps.platformName.toLowerCase() === 'yips4') {
          PORT = 40123;
        } else {
          PORT = 12345;
        }

        {
          _logger.default.info('Connecting to WebDriver: ' + HOST + ':' + PORT);
        }
        this.socket = new net.Socket();
        this.socket.setTimeout(SOCKET_TIMEOUT);
        this.socket.setKeepAlive(true, 1000);
        let socketClient = this.socket;

        let removeListenerHandler = function () {
          socketClient.removeListener('timeout', timeoutHandler);
          socketClient.removeListener('close', closeHandler);
          socketClient.removeListener('end', endHandler);
          socketClient.removeListener('error', errorHandler);
        };

        let errorHandler = function (ex) {
          _logger.default.error(ex);

          _logger.default.error('Check that WebDriver is enabled in application, if a device ensure the proper IP address is used.');

          removeListenerHandler();
          socketClient.destroy();
          errno = ex.errno;
          resolve(false);
        };

        this.socket.on('error', errorHandler);

        let closeHandler = function () {
          _logger.default.info('Connection closed');

          removeListenerHandler();
          socketClient.destroy();
          resolve(false);
        };

        this.socket.on('close', closeHandler);

        let timeoutHandler = function () {
          _logger.default.error('Connection timed out');

          removeListenerHandler();
          socketClient.destroy();
          resolve(false);
        };

        this.socket.on('timeout', timeoutHandler);
        this.socket.connect(PORT, HOST, function () {
          _logger.default.error('Connection established');

          removeListenerHandler();
          resolve(true);
        });

        let endHandler = function () {
          _logger.default.info('Connection ended');

          removeListenerHandler();
          socketClient.destroy();
          resolve(false);
        };

        this.socket.on('end', endHandler);
      });
      retryCount++;
      connected = await connectedPromise;

      if (!connected && errno === 'ECONNREFUSED') {
        _logger.default.debug('Connection refused, sleeping...');

        await (0, _asyncbox.sleep)(2000);
        errno = 'EOK';
      }

      if (!connected && retryCount === MAX_RETRY_COUNT - 1) {
        _logger.default.errorAndThrow('Failed to connect ' + MAX_RETRY_COUNT + ' times. Aborting.');
      }
    }

    retryCount = 0;
    this.ready = connected;
  }

  async executeSocketCommand(cmd) {
    if (!this.socket.writable) {
      _logger.default.info('Socket is not writable. Trying to reconnect.');

      await this.connectSocket();
    }

    let retryCount = 0;

    while (retryCount < MAX_RETRY_COUNT) {
      this.socket.setTimeout(SOCKET_TIMEOUT);
      let cmdPromise = new _bluebird.default(resolve => {
        _logger.default.debug('COMMAND: ' + cmd);

        let totaldata = [];
        let endMarker = new Buffer.from('youiend');
        let socketClient = this.socket;

        let removeListenerHandler = function () {
          socketClient.removeListener('data', dataHandler);
          socketClient.removeListener('timeout', timeoutHandler);
          socketClient.removeListener('error', errorHandler);
        };

        let timeoutHandler = function () {
          _logger.default.info('Timeout in execute command.');

          removeListenerHandler();
          resolve(false);
        };

        let errorHandler = function () {
          _logger.default.info('On error');

          removeListenerHandler();
          resolve(false);
        };

        let dataHandler = function (data) {
          if (data.length >= endMarker.length) {
            let dataend = new Buffer.alloc(endMarker.length);
            let startIndex = data.length - endMarker.length;
            data.copy(dataend, 0, startIndex, startIndex + endMarker.length);

            if (dataend.equals(endMarker)) {
              let lastData = data.slice(0, startIndex);
              totaldata.push(lastData);
              removeListenerHandler();
              resolve(Buffer.concat(totaldata));
            } else {
              totaldata.push(data);
            }
          }
        };

        socketClient.write(cmd + '\n', 'UTF8', () => {
          socketClient.on('data', dataHandler);
          socketClient.on('timeout', timeoutHandler);
          socketClient.on('error', errorHandler);
        });
      });
      let res = await cmdPromise;

      if (res === false) {
        retryCount++;

        _logger.default.info('Socket failed. Retrying: ' + retryCount);

        continue;
      } else {
        return res;
      }
    }

    throw new Error('ExecuteSocketCommand failed.');
  }

}

exports.YouiEngineDriver = YouiEngineDriver;

for (let [cmd, fn] of _lodash.default.toPairs(_commands.default)) {
  YouiEngineDriver.prototype[cmd] = fn;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOlsiVE9fUFJPWFlfQ09NTU9OIiwiVE9fUFJPWFlfSU9TX09OTFkiLCJUT19QUk9YWV9BTkRST0lEX09OTFkiLCJUT19QUk9YWV9JT1MiLCJjb25jYXQiLCJUT19QUk9YWV9BTkRST0lEIiwiVE9fUFJPWFlfTUFDIiwiTUFYX1JFVFJZX0NPVU5UIiwiU09DS0VUX1RJTUVPVVQiLCJZb3VpRW5naW5lRHJpdmVyIiwiQmFzZURyaXZlciIsInJlc2V0WW91aUVuZ2luZSIsInJlYWR5Iiwic29ja2V0IiwibG9jYXRvclN0cmF0ZWdpZXMiLCJwcm94eWRyaXZlciIsInByb3h5QWxsb3dMaXN0IiwicHJveHlBbGwiLCJkZXZpY2UiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJzaG91bGRWYWxpZGF0ZUNhcHMiLCJkZXNpcmVkQ2FwQ29uc3RyYWludHMiLCJzZXR0aW5ncyIsIkRldmljZVNldHRpbmdzIiwib25TZXR0aW5nc1VwZGF0ZSIsImJpbmQiLCJ2YWxpZGF0ZUxvY2F0b3JTdHJhdGVneSIsInN0cmF0ZWd5IiwiY3JlYXRlU2Vzc2lvbiIsImNhcHMiLCJzZXNzaW9uSWQiLCJwbGF0Zm9ybU5hbWUiLCJhcHBQbGF0Zm9ybSIsInRvTG93ZXJDYXNlIiwic3RhcnRYQ1VJVGVzdFNlc3Npb24iLCJzdGFydEFuZHJvaWRTZXNzaW9uIiwic3RhcnRNYWNTZXNzaW9uIiwiWWlNYWMiLCJzdGFydFNlc3Npb24iLCJZaUxpbnV4IiwiQmx1ZVNreSIsInNoZWxsIiwicmVxdWlyZSIsImV4ZWMiLCJ1ZGlkIiwiaW5jbHVkZXMiLCJUdk9zU2ltdWxhdG9yIiwiVHZPcyIsImxvZ2dlciIsImVycm9yQW5kVGhyb3ciLCJjb25uZWN0U29ja2V0IiwiZnVsbFNvdXJjZVRyZWUiLCJkZWJ1ZyIsInVwZGF0ZVNldHRpbmdzIiwiU291cmNlVHJlZUZpbHRlciIsImUiLCJkZWxldGVTZXNzaW9uIiwia2V5IiwidmFsdWUiLCJzZXRUaW1lRGlsYXRpb24iLCJzZXRTb3VyY2VUcmVlRmlsdGVyIiwic3RvcCIsImVuZFNlc3Npb24iLCJlbmQiLCJkZXN0cm95IiwiZHJpdmVyU2hvdWxkRG9Qcm94eUNtZCIsImNvbW1hbmQiLCJhbGxvd2VkQ29tbWFuZCIsImV4ZWN1dGVDb21tYW5kIiwiY21kIiwiYXJncyIsInJlY2VpdmVBc3luY1Jlc3BvbnNlIiwiY2xlYXJOZXdDb21tYW5kVGltZW91dCIsInJlc3VsdCIsInN0YXJ0TmV3Q29tbWFuZFRpbWVvdXQiLCJlcnJvcnMiLCJOb1N1Y2hEcml2ZXJFcnJvciIsInZhbGlkYXRlRGVzaXJlZENhcHMiLCJyZXMiLCJ5b3VpRW5naW5lQXBwQWRkcmVzcyIsIm1zZyIsImFwcCIsImZzIiwicGF0aCIsImV4aXN0c1N5bmMiLCJhYnNvbHV0ZXBhdGgiLCJyZXNvbHZlIiwiZGV2aWNlTmFtZSIsImF2ZCIsInNldHVwTmV3WENVSVRlc3REcml2ZXIiLCJqYXZhc2NyaXB0RW5hYmxlZCIsIk9iamVjdCIsImFzc2lnbiIsImRyaXZlciIsIlhDVUlUZXN0RHJpdmVyIiwiY2Fwc0NvcHkiLCJfIiwiY2xvbmVEZWVwIiwibmV3Q29tbWFuZFRpbWVvdXQiLCJpbmZvIiwic2V0dXBOZXdBbmRyb2lkRHJpdmVyIiwiYW5kcm9pZEFyZ3MiLCJhbmRyb2lkZHJpdmVyIiwiQW5kcm9pZERyaXZlciIsInNldFNlY3VyaXR5T3B0aW9ucyIsInNldHVwTmV3TWFjRHJpdmVyIiwibWFjQXJncyIsIm1hY2RyaXZlciIsIk1hY0RyaXZlciIsInJlbGF4ZWRTZWN1cml0eUVuYWJsZWQiLCJkZW55SW5zZWN1cmUiLCJhbGxvd0luc2VjdXJlIiwicmV0cnlDb3VudCIsImNvbm5lY3RlZCIsImVycm5vIiwiY29ubmVjdGVkUHJvbWlzZSIsIkIiLCJuZXQiLCJIT1NUIiwiUE9SVCIsInlvdWlFbmdpbmVBcHBQb3J0IiwiU29ja2V0Iiwic2V0VGltZW91dCIsInNldEtlZXBBbGl2ZSIsInNvY2tldENsaWVudCIsInJlbW92ZUxpc3RlbmVySGFuZGxlciIsInJlbW92ZUxpc3RlbmVyIiwidGltZW91dEhhbmRsZXIiLCJjbG9zZUhhbmRsZXIiLCJlbmRIYW5kbGVyIiwiZXJyb3JIYW5kbGVyIiwiZXgiLCJlcnJvciIsIm9uIiwiY29ubmVjdCIsImV4ZWN1dGVTb2NrZXRDb21tYW5kIiwid3JpdGFibGUiLCJjbWRQcm9taXNlIiwidG90YWxkYXRhIiwiZW5kTWFya2VyIiwiQnVmZmVyIiwiZnJvbSIsImRhdGFIYW5kbGVyIiwiZGF0YSIsImxlbmd0aCIsImRhdGFlbmQiLCJhbGxvYyIsInN0YXJ0SW5kZXgiLCJjb3B5IiwiZXF1YWxzIiwibGFzdERhdGEiLCJzbGljZSIsInB1c2giLCJ3cml0ZSIsIkVycm9yIiwiZm4iLCJ0b1BhaXJzIiwiY29tbWFuZHMiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBS0EsTUFBTUEsZUFBZSxHQUFHLENBQ3RCLFlBRHNCLEVBRXRCLFVBRnNCLEVBR3RCLFFBSHNCLEVBSXRCLGFBSnNCLEVBS3RCLGdCQUxzQixFQU10QixZQU5zQixFQU90QixZQVBzQixFQVF0QixXQVJzQixFQVN0QixNQVRzQixFQVV0QixXQVZzQixFQVd0QixnQkFYc0IsQ0FBeEI7QUFjQSxNQUFNQyxpQkFBaUIsR0FBRyxDQUN4QixhQUR3QixDQUExQjtBQUlBLE1BQU1DLHFCQUFxQixHQUFHLENBQzVCLHNCQUQ0QixFQUU1QixnQkFGNEIsRUFHNUIsVUFINEIsRUFJNUIsa0JBSjRCLEVBSzVCLGNBTDRCLEVBTTVCLHNCQU40QixFQU81Qix3QkFQNEIsRUFRNUIsUUFSNEIsQ0FBOUI7QUFXQSxNQUFNQyxZQUFZLEdBQUdGLGlCQUFpQixDQUFDRyxNQUFsQixDQUF5QkosZUFBekIsQ0FBckI7QUFDQSxNQUFNSyxnQkFBZ0IsR0FBR0gscUJBQXFCLENBQUNFLE1BQXRC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QUFJNEUsS0FBSixDQUFVLDhCQUFWLENBQU47QUFDRDs7QUFwZXVDOzs7O0FBdWUxQyxLQUFLLElBQUksQ0FBQ3JGLEdBQUQsRUFBTXNGLEVBQU4sQ0FBVCxJQUFzQjNELGdCQUFFNEQsT0FBRixDQUFVQyxpQkFBVixDQUF0QixFQUEyQztBQUN6Q3JKLEVBQUFBLGdCQUFnQixDQUFDc0osU0FBakIsQ0FBMkJ6RixHQUEzQixJQUFrQ3NGLEVBQWxDO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRHJpdmVyLCBEZXZpY2VTZXR0aW5ncywgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCB7IGRlc2lyZWRDYXBDb25zdHJhaW50cyB9IGZyb20gJy4vZGVzaXJlZC1jYXBzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IGNvbW1hbmRzIGZyb20gJy4vY29tbWFuZHMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSAnYXN5bmNib3gnO1xuXG4vLyBmb3IgcHJveGllc1xuaW1wb3J0IEFuZHJvaWREcml2ZXIgZnJvbSAnYXBwaXVtLXVpYXV0b21hdG9yMi1kcml2ZXInO1xuaW1wb3J0IFhDVUlUZXN0RHJpdmVyIGZyb20gJ2FwcGl1bS14Y3VpdGVzdC1kcml2ZXInO1xuaW1wb3J0IE1hY0RyaXZlciBmcm9tICdhcHBpdW0tbWFjLWRyaXZlcic7XG5pbXBvcnQgQmx1ZVNreSBmcm9tICcuL2JsdWVza3knO1xuaW1wb3J0IFR2T3MgZnJvbSAnLi90dm9zJztcbmltcG9ydCBUdk9zU2ltdWxhdG9yIGZyb20gJy4vdHZvc3NpbXVsYXRvcic7XG5pbXBvcnQgWWlNYWMgZnJvbSAnLi95aW1hYyc7XG5pbXBvcnQgWWlMaW51eCBmcm9tICcuL3lpbGludXgnO1xuXG4vLyBBZGQgY29tbWFuZHMgZnJvbSB0aGUgZm9sbG93aW5nIGxvY2F0aW9uIHRoYXQgc2hvdWxkIGJlIG1hcHBlZCB0byBleGlzdGluZyBkcml2ZXJzOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0tYmFzZS1kcml2ZXIvYmxvYi9tYXN0ZXIvbGliL21qc29ud3Avcm91dGVzLmpzXG5cbmNvbnN0IFRPX1BST1hZX0NPTU1PTiA9IFtcbiAgJ2JhY2tncm91bmQnLFxuICAnY2xvc2VBcHAnLFxuICAnZ2V0TG9nJyxcbiAgJ2dldExvZ1R5cGVzJyxcbiAgJ2dldE9yaWVudGF0aW9uJyxcbiAgJ2dldFN0cmluZ3MnLFxuICAnaW5zdGFsbEFwcCcsXG4gICdsYXVuY2hBcHAnLFxuICAnbG9jaycsXG4gICdyZW1vdmVBcHAnLFxuICAnc2V0T3JpZW50YXRpb24nLFxuXTtcblxuY29uc3QgVE9fUFJPWFlfSU9TX09OTFkgPSBbXG4gICdtb2JpbGVTaGFrZScsXG5dO1xuXG5jb25zdCBUT19QUk9YWV9BTkRST0lEX09OTFkgPSBbXG4gICdnZXROZXR3b3JrQ29ubmVjdGlvbicsXG4gICdpc0FwcEluc3RhbGxlZCcsXG4gICdpc0xvY2tlZCcsXG4gICdsb25nUHJlc3NLZXlDb2RlJyxcbiAgJ3ByZXNzS2V5Q29kZScsXG4gICdzZXROZXR3b3JrQ29ubmVjdGlvbicsXG4gICd0b2dnbGVMb2NhdGlvblNlcnZpY2VzJyxcbiAgJ3VubG9jaycsXG5dO1xuXG5jb25zdCBUT19QUk9YWV9JT1MgPSBUT19QUk9YWV9JT1NfT05MWS5jb25jYXQoVE9fUFJPWFlfQ09NTU9OKTtcbmNvbnN0IFRPX1BST1hZX0FORFJPSUQgPSBUT19QUk9YWV9BTkRST0lEX09OTFkuY29uY2F0KFRPX1BST1hZX0NPTU1PTik7XG5jb25zdCBUT19QUk9YWV9NQUMgPSBUT19QUk9YWV9DT01NT047XG5cbmNvbnN0IE1BWF9SRVRSWV9DT1VOVCA9IDM7XG5jb25zdCBTT0NLRVRfVElNRU9VVCA9IDEwMDAwO1xuXG5jbGFzcyBZb3VpRW5naW5lRHJpdmVyIGV4dGVuZHMgQmFzZURyaXZlciB7XG4gIHJlc2V0WW91aUVuZ2luZSAoKSB7XG5cbiAgICB0aGlzLnJlYWR5ID0gZmFsc2U7XG4gICAgdGhpcy5zb2NrZXQgPSBudWxsO1xuICAgIHRoaXMubG9jYXRvclN0cmF0ZWdpZXMgPSBbJ2lkJywgJ25hbWUnLCAnY2xhc3MgbmFtZScsICdhY2Nlc3NpYmlsaXR5IGlkJ107XG4gICAgdGhpcy5wcm94eWRyaXZlciA9IG51bGw7XG4gICAgdGhpcy5wcm94eUFsbG93TGlzdCA9ICcnO1xuICAgIHRoaXMucHJveHlBbGwgPSBmYWxzZTtcbiAgICB0aGlzLmRldmljZSA9IG51bGw7XG4gIH1cblxuICBjb25zdHJ1Y3RvciAob3B0cywgc2hvdWxkVmFsaWRhdGVDYXBzKSB7XG4gICAgc3VwZXIob3B0cywgc2hvdWxkVmFsaWRhdGVDYXBzKTtcblxuICAgIHRoaXMuZGVzaXJlZENhcENvbnN0cmFpbnRzID0gZGVzaXJlZENhcENvbnN0cmFpbnRzO1xuICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgRGV2aWNlU2V0dGluZ3MoeydUaW1lRGlsYXRpb24nOiAxLCAnU291cmNlVHJlZUZpbHRlcic6ICcnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNldHRpbmdzVXBkYXRlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucmVzZXRZb3VpRW5naW5lKCk7XG5cbiAgfVxuXG4gIHZhbGlkYXRlTG9jYXRvclN0cmF0ZWd5IChzdHJhdGVneSkge1xuICAgIHN1cGVyLnZhbGlkYXRlTG9jYXRvclN0cmF0ZWd5KHN0cmF0ZWd5LCBmYWxzZSk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVTZXNzaW9uIChjYXBzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBbc2Vzc2lvbklkXSA9IGF3YWl0IHN1cGVyLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG5cbiAgICAgIC8vIHNldHVwIHByb3hpZXMgLSBpZiBwbGF0Zm9ybU5hbWUgaXMgbm90IGVtcHR5LCBtYWtlIGl0IGxlc3MgY2FzZSBzZW5zaXRpdmVcbiAgICAgIGlmIChjYXBzLnBsYXRmb3JtTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICBsZXQgYXBwUGxhdGZvcm0gPSBjYXBzLnBsYXRmb3JtTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBzd2l0Y2ggKGFwcFBsYXRmb3JtKSB7XG4gICAgICAgICAgY2FzZSAnaW9zJzpcbiAgICAgICAgICBjYXNlICd0dm9zJzpcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RhcnRYQ1VJVGVzdFNlc3Npb24oY2Fwcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdhbmRyb2lkJzpcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RhcnRBbmRyb2lkU2Vzc2lvbihjYXBzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ21hYyc6XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN0YXJ0TWFjU2Vzc2lvbihjYXBzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3lpbWFjJzpcbiAgICAgICAgICAgIHRoaXMuZGV2aWNlID0gbmV3IFlpTWFjKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRldmljZS5zdGFydFNlc3Npb24oY2Fwcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd5aWxpbnV4JzpcbiAgICAgICAgICAgIHRoaXMuZGV2aWNlID0gbmV3IFlpTGludXgoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZGV2aWNlLnN0YXJ0U2Vzc2lvbihjYXBzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2JsdWVza3knOlxuICAgICAgICAgICAgdGhpcy5kZXZpY2UgPSBuZXcgQmx1ZVNreSgpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5kZXZpY2Uuc3RhcnRTZXNzaW9uKGNhcHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAneWl0dm9zJzoge1xuICAgICAgICAgICAgbGV0IHNoZWxsID0gcmVxdWlyZSgnc2hlbGxqcycpO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBzaGVsbFxuICAgICAgICAgICAgICAgIC5leGVjKGBpbnN0cnVtZW50cyAtcyBkZXZpY2VzIHwgZ3JlcCAnJHtjYXBzLnVkaWR9J2ApXG4gICAgICAgICAgICAgICAgLmluY2x1ZGVzKCcoU2ltdWxhdG9yKScpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgdGhpcy5kZXZpY2UgPSBuZXcgVHZPc1NpbXVsYXRvcigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5kZXZpY2UgPSBuZXcgVHZPcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5kZXZpY2Uuc3RhcnRTZXNzaW9uKGNhcHMsIHRoaXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgJ25vcHJveHknOlxuICAgICAgICAgIGNhc2UgJ2Nvbm5lY3R0b2FwcCc6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yQW5kVGhyb3coXG4gICAgICAgICAgICAgIGBVbnN1cHBvcnRlZCBwbGF0Zm9ybU5hbWU6ICR7Y2Fwcy5wbGF0Zm9ybU5hbWV9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy5jb25uZWN0U29ja2V0KCk7XG5cbiAgICAgIGlmIChjYXBzLmZ1bGxTb3VyY2VUcmVlID09PSB0cnVlKSB7XG4gICAgICAgIC8vRG8gbm90IHNldCBmaWx0ZXJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnU2V0dGluZyBTb3VyY2VUcmVlRmlsdGVyIHRvIGRpc3BsYXllZCBlbGVtZW50cyBvbmx5Jyk7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlU2V0dGluZ3Moe1xuICAgICAgICAgIFNvdXJjZVRyZWVGaWx0ZXI6IFwiW0Bpc0Rpc3BsYXllZD0ndHJ1ZSddXCIsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW3Nlc3Npb25JZCwgdGhpcy5vcHRzXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhd2FpdCB0aGlzLmRlbGV0ZVNlc3Npb24oKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgb25TZXR0aW5nc1VwZGF0ZSAoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgPT09ICdUaW1lRGlsYXRpb24nKSB7XG4gICAgICBhd2FpdCB0aGlzLnNldFRpbWVEaWxhdGlvbih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdTb3VyY2VUcmVlRmlsdGVyJykge1xuICAgICAgYXdhaXQgdGhpcy5zZXRTb3VyY2VUcmVlRmlsdGVyKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzdG9wICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlU2Vzc2lvbiAoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdEZWxldGluZyBZb3VpRW5naW5lIHNlc3Npb24nKTtcblxuICAgIGlmICh0aGlzLmNhcHMucGxhdGZvcm1OYW1lICE9PSBudWxsKSB7XG4gICAgICBsZXQgYXBwUGxhdGZvcm0gPSB0aGlzLmNhcHMucGxhdGZvcm1OYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGlmIChbJ3lpbWFjJywgJ3lpdHZvcycsICdibHVlc2t5JywgJ3lpbGludXgnXS5pbmNsdWRlcyhhcHBQbGF0Zm9ybSkpIHtcbiAgICAgICAgaWYgKHRoaXMuZGV2aWNlKSB7XG4gICAgICAgICAgdGhpcy5kZXZpY2UuZW5kU2Vzc2lvbigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJveHlkcml2ZXIgIT09IG51bGwpIHtcbiAgICAgIGF3YWl0IHRoaXMucHJveHlkcml2ZXIuZGVsZXRlU2Vzc2lvbigpO1xuICAgIH1cbiAgICB0aGlzLnNvY2tldC5lbmQoKTtcbiAgICB0aGlzLnNvY2tldC5kZXN0cm95KCk7XG4gICAgYXdhaXQgc3VwZXIuZGVsZXRlU2Vzc2lvbigpO1xuICAgIGF3YWl0IHRoaXMuc3RvcCgpO1xuICB9XG5cbiAgZHJpdmVyU2hvdWxkRG9Qcm94eUNtZCAoY29tbWFuZCkge1xuICAgIGlmICghdGhpcy5wcm94eWRyaXZlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3h5QWxsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBvbmx5IGFsbG93IHdoaXRlIGxpc3RlZCBjb21tYW5kc1xuICAgIGZvciAobGV0IGFsbG93ZWRDb21tYW5kIG9mIHRoaXMucHJveHlBbGxvd0xpc3QpIHtcbiAgICAgIGlmIChhbGxvd2VkQ29tbWFuZCA9PT0gY29tbWFuZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgYXN5bmMgZXhlY3V0ZUNvbW1hbmQgKGNtZCwgLi4uYXJncykge1xuICAgIGlmIChjbWQgPT09ICdyZWNlaXZlQXN5bmNSZXNwb25zZScpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhgRXhlY3V0aW5nIFlvdWlFbmdpbmVEcml2ZXIgcmVzcG9uc2UgJyR7Y21kfSdgKTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnJlY2VpdmVBc3luY1Jlc3BvbnNlKC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlYWR5KSB7XG5cbiAgICAgIGlmICh0aGlzLmRyaXZlclNob3VsZERvUHJveHlDbWQoY21kKSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoYEV4ZWN1dGluZyBwcm94aWVkIFdlYkRyaXZlciBjb21tYW5kICcke2NtZH0nYCk7XG5cbiAgICAgICAgLy8gTWFudWFsbHkgaGFuZGxlIG91ciBvd24gWU9VSV9BUFAgY29udGV4dFxuICAgICAgICBpZiAoY21kID09PSAnc2V0Q29udGV4dCcgJiYgYXJnc1swXSA9PT0gJ1lPVUlfQVBQJykge1xuICAgICAgICAgIHRoaXMucHJveHlBbGwgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQ29tbWFuZChjbWQsIC4uLmFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlcmUgYXJlIDIgQ29tbWFuZFRpbWVvdXQgKFlvdWlFbmdpbmVEcml2ZXIgYW5kIHByb3h5KVxuICAgICAgICAvLyBPbmx5IFlvdWlFbmdpbmVEcml2ZXIgQ29tbWFuZFRpbWVvdXQgaXMgdXNlZDsgUHJveHkgaXMgZGlzYWJsZWRcbiAgICAgICAgLy8gQWxsIHByb3h5IGNvbW1hbmRzIG5lZWRzIHRvIHJlc2V0IHRoZSBZb3VpRW5naW5lRHJpdmVyIENvbW1hbmRUaW1lb3V0XG4gICAgICAgIC8vIEhlcmUgd2UgbWFudWFsbHkgcmVzZXQgdGhlIFlvdWlFbmdpbmVEcml2ZXIgQ29tbWFuZFRpbWVvdXQgZm9yIGNvbW1hbmRzIHRoYXQgZ29lIHRvIHByb3h5LlxuICAgICAgICB0aGlzLmNsZWFyTmV3Q29tbWFuZFRpbWVvdXQoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucHJveHlkcml2ZXIuZXhlY3V0ZUNvbW1hbmQoY21kLCAuLi5hcmdzKTtcbiAgICAgICAgdGhpcy5zdGFydE5ld0NvbW1hbmRUaW1lb3V0KGNtZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dnZXIuZGVidWcoYEV4ZWN1dGluZyBZb3VpRW5naW5lIFdlYkRyaXZlciBjb21tYW5kICcke2NtZH0nYCk7XG4gICAgICAgIHJldHVybiBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChjbWQsIC4uLmFyZ3MpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXIuZGVidWcoYENvbW1hbmQgRXJyb3IgJyR7Y21kfSdgKTtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoRHJpdmVyRXJyb3IoXG4gICAgICAgIGBEcml2ZXIgaXMgbm90IHJlYWR5LCBjYW5ub3QgZXhlY3V0ZSAke2NtZH0uYFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB2YWxpZGF0ZURlc2lyZWRDYXBzIChjYXBzKSB7XG4gICAgLy8gY2hlY2sgd2l0aCB0aGUgYmFzZSBjbGFzcywgYW5kIHJldHVybiBpZiBpdCBmYWlsc1xuICAgIGxldCByZXMgPSBzdXBlci52YWxpZGF0ZURlc2lyZWRDYXBzKGNhcHMpO1xuICAgIGlmICghcmVzKSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHRoZSBjYXBhYmlsaXRpZXMgaGFzIHlvdWlFbmdpbmVBcHBBZGRyZXNzXG4gICAgaWYgKCFjYXBzLnlvdWlFbmdpbmVBcHBBZGRyZXNzKSB7XG4gICAgICBsZXQgbXNnID0gJ1RoZSBkZXNpcmVkIGNhcGFiaWxpdGllcyBtdXN0IGluY2x1ZGUgeW91aUVuZ2luZUFwcEFkZHJlc3MnO1xuICAgICAgbG9nZ2VyLmVycm9yQW5kVGhyb3cobXNnKTtcbiAgICB9XG5cbiAgICAvLyBBcHAgaXMgYmVpbmcgbGF1bmNoZWRcbiAgICBpZiAoXG4gICAgICBjYXBzLnBsYXRmb3JtTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnY29ubmVjdHRvYXBwJyAmJlxuICAgICAgY2Fwcy5wbGF0Zm9ybU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ25vcHJveHknXG4gICAgKSB7XG4gICAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgY2FwYWJpbGl0aWVzIGhhcyBhcHBcbiAgICAgIGlmICghY2Fwcy5hcHApIHtcbiAgICAgICAgbGV0IG1zZyA9ICdUaGUgZGVzaXJlZCBjYXBhYmlsaXRpZXMgbXVzdCBpbmNsdWRlIGFwcCc7XG4gICAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KG1zZyk7XG4gICAgICB9XG4gICAgICBjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gICAgICBjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGNhcHMuYXBwKSkge1xuICAgICAgICBsZXQgYWJzb2x1dGVwYXRoID0gcGF0aC5yZXNvbHZlKGNhcHMuYXBwKTtcbiAgICAgICAgbGV0IG1zZyA9XG4gICAgICAgICAgJ1RoZSBhcHAgY291bGQgbm90IGJlIGZvdW5kIGluIGZvbGxvd2luZyBsb2NhdGlvbjogJyArIGFic29sdXRlcGF0aDtcbiAgICAgICAgbG9nZ2VyLmVycm9yQW5kVGhyb3cobXNnKTtcbiAgICAgIH1cblxuICAgICAgLy9BbmRyb2lkIGVtdWxhdG9yIHdpdGggcHJveHlcbiAgICAgIGlmIChjYXBzLmRldmljZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICAgIGlmICghY2Fwcy5hdmQpIHtcbiAgICAgICAgICBsZXQgbXNnID0gJ1RoZSBkZXNpcmVkIGNhcGFiaWxpdGllcyBtdXN0IGluY2x1ZGUgYXZkJztcbiAgICAgICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhtc2cpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmluYWxseSwgcmV0dXJuIHRydWUgc2luY2UgdGhlIHN1cGVyY2xhc3MgY2hlY2sgcGFzc2VkLCBhcyBkaWQgdGhpc1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgc2V0dXBOZXdYQ1VJVGVzdERyaXZlciAoY2Fwcykge1xuICAgIGxldCBhcmdzID0ge1xuICAgICAgamF2YXNjcmlwdEVuYWJsZWQ6IHRydWUsXG4gICAgfTtcbiAgICBhcmdzID0gT2JqZWN0LmFzc2lnbih0aGlzLm9wdHMsIGFyZ3MpO1xuXG4gICAgbGV0IGRyaXZlciA9IG5ldyBYQ1VJVGVzdERyaXZlcihhcmdzKTtcblxuICAgIGxldCBjYXBzQ29weSA9IF8uY2xvbmVEZWVwKGNhcHMpO1xuICAgIC8vIERpc2FibGluZyB0aGUgcHJveHkgQ29tbWFuZFRpbWVvdXQgaW4gdGhlIGlPUyBkcml2ZXIgc2luY2Ugd2UgYXJlIG5vdyBoYW5kbGluZyBpdCBpbiB0aGUgWW91aUVuZ2luZSBEcml2ZXJcbiAgICBjYXBzQ29weS5uZXdDb21tYW5kVGltZW91dCA9IDA7XG4gICAgYXdhaXQgZHJpdmVyLmNyZWF0ZVNlc3Npb24oY2Fwc0NvcHkpO1xuXG4gICAgcmV0dXJuIGRyaXZlcjtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0WENVSVRlc3RTZXNzaW9uIChjYXBzKSB7XG4gICAgbG9nZ2VyLmluZm8oJ1N0YXJ0aW5nIGFuIElPUyBwcm94eSBzZXNzaW9uJyk7XG4gICAgdGhpcy5wcm94eUFsbG93TGlzdCA9IFRPX1BST1hZX0lPUztcblxuICAgIHRoaXMucHJveHlkcml2ZXIgPSBhd2FpdCB0aGlzLnNldHVwTmV3WENVSVRlc3REcml2ZXIoY2Fwcyk7XG4gIH1cblxuICBhc3luYyBzZXR1cE5ld0FuZHJvaWREcml2ZXIgKGNhcHMpIHtcbiAgICBsZXQgYW5kcm9pZEFyZ3MgPSB7XG4gICAgICAuLi50aGlzLm9wdHMsXG4gICAgICBqYXZhc2NyaXB0RW5hYmxlZDogdHJ1ZSxcbiAgICB9O1xuICAgIGxldCBhbmRyb2lkZHJpdmVyID0gbmV3IEFuZHJvaWREcml2ZXIoYW5kcm9pZEFyZ3MpO1xuICAgIHRoaXMuc2V0U2VjdXJpdHlPcHRpb25zKGFuZHJvaWRkcml2ZXIpO1xuXG4gICAgbGV0IGNhcHNDb3B5ID0gXy5jbG9uZURlZXAoY2Fwcyk7XG4gICAgLy8gRGlzYWJsaW5nIHRoZSBwcm94eSBDb21tYW5kVGltZW91dCBpbiB0aGUgQW5kcm9pZCBkcml2ZXIgc2luY2Ugd2UgYXJlIG5vdyBoYW5kbGluZyBpdCBpbiB0aGUgWW91aUVuZ2luZSBEcml2ZXJcbiAgICBjYXBzQ29weS5uZXdDb21tYW5kVGltZW91dCA9IDA7XG5cbiAgICBhd2FpdCBhbmRyb2lkZHJpdmVyLmNyZWF0ZVNlc3Npb24oY2Fwc0NvcHkpO1xuXG4gICAgcmV0dXJuIGFuZHJvaWRkcml2ZXI7XG4gIH1cblxuICBhc3luYyBzdGFydEFuZHJvaWRTZXNzaW9uIChjYXBzKSB7XG4gICAgbG9nZ2VyLmluZm8oJ1N0YXJ0aW5nIGFuIEFuZHJvaWQgcHJveHkgc2Vzc2lvbicpO1xuICAgIHRoaXMucHJveHlBbGxvd0xpc3QgPSBUT19QUk9YWV9BTkRST0lEO1xuXG4gICAgdGhpcy5wcm94eWRyaXZlciA9IGF3YWl0IHRoaXMuc2V0dXBOZXdBbmRyb2lkRHJpdmVyKGNhcHMpO1xuICB9XG5cbiAgYXN5bmMgc2V0dXBOZXdNYWNEcml2ZXIgKGNhcHMpIHtcbiAgICBsZXQgbWFjQXJncyA9IHtcbiAgICAgIGphdmFzY3JpcHRFbmFibGVkOiB0cnVlLFxuICAgIH07XG4gICAgbGV0IG1hY2RyaXZlciA9IG5ldyBNYWNEcml2ZXIobWFjQXJncyk7XG4gICAgbGV0IGNhcHNDb3B5ID0gXy5jbG9uZURlZXAoY2Fwcyk7XG4gICAgLy8gRGlzYWJsaW5nIHRoZSBwcm94eSBDb21tYW5kVGltZW91dCBpbiB0aGUgcHJveGllZCBkcml2ZXIgc2luY2Ugd2UgYXJlIG5vdyBoYW5kbGluZyBpdCBpbiB0aGUgWW91aUVuZ2luZSBEcml2ZXJcbiAgICBjYXBzQ29weS5uZXdDb21tYW5kVGltZW91dCA9IDA7XG5cbiAgICBhd2FpdCBtYWNkcml2ZXIuY3JlYXRlU2Vzc2lvbihjYXBzQ29weSk7XG5cbiAgICByZXR1cm4gbWFjZHJpdmVyO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRNYWNTZXNzaW9uIChjYXBzKSB7XG4gICAgbG9nZ2VyLmluZm8oJ1N0YXJ0aW5nIGEgTWFjIHByb3h5IHNlc3Npb24nKTtcbiAgICB0aGlzLnByb3h5QWxsb3dMaXN0ID0gVE9fUFJPWFlfTUFDO1xuXG4gICAgdGhpcy5wcm94eWRyaXZlciA9IGF3YWl0IHRoaXMuc2V0dXBOZXdNYWNEcml2ZXIoY2Fwcyk7XG4gIH1cblxuICBzZXRTZWN1cml0eU9wdGlvbnMgKGRyaXZlcikge1xuICAgIGlmICh0aGlzLnJlbGF4ZWRTZWN1cml0eUVuYWJsZWQpIHtcbiAgICAgIGRyaXZlci5yZWxheGVkU2VjdXJpdHlFbmFibGVkID0gdGhpcy5yZWxheGVkU2VjdXJpdHlFbmFibGVkO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmRlbnlJbnNlY3VyZSkge1xuICAgICAgZHJpdmVyLmRlbnlJbnNlY3VyZSA9IHRoaXMuZGVueUluc2VjdXJlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFsbG93SW5zZWN1cmUpIHtcbiAgICAgIGRyaXZlci5hbGxvd0luc2VjdXJlID0gdGhpcy5hbGxvd0luc2VjdXJlO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNPQ0tFVFNcbiAgYXN5bmMgY29ubmVjdFNvY2tldCAoKSB7XG4gICAgbGV0IHJldHJ5Q291bnQgPSAwO1xuICAgIGxldCBjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICBsZXQgZXJybm8gPSAnRU9LJztcbiAgICB3aGlsZSAocmV0cnlDb3VudCA8IE1BWF9SRVRSWV9DT1VOVCAmJiAhY29ubmVjdGVkKSB7XG4gICAgICBsb2dnZXIuaW5mbygnQXR0ZW1wdCAjJyArIChyZXRyeUNvdW50ICsgMSkpO1xuXG4gICAgICBsZXQgY29ubmVjdGVkUHJvbWlzZSA9IG5ldyBCKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGxldCBuZXQgPSByZXF1aXJlKCduZXQnKTtcblxuICAgICAgICBsZXQgSE9TVCA9IHRoaXMub3B0cy55b3VpRW5naW5lQXBwQWRkcmVzcztcbiAgICAgICAgbGV0IFBPUlQ7XG5cbiAgICAgICAgaWYgKHRoaXMuY2Fwcy55b3VpRW5naW5lQXBwUG9ydCkge1xuICAgICAgICAgIFBPUlQgPSB0aGlzLmNhcHMueW91aUVuZ2luZUFwcFBvcnQ7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jYXBzLnBsYXRmb3JtTmFtZS50b0xvd2VyQ2FzZSgpID09PSAneWlwczQnKSB7XG4gICAgICAgICAgUE9SVCA9IDQwMTIzOyAvL2RlZmF1bHQgcG9ydCBmb3IgUFM0XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgUE9SVCA9IDEyMzQ1OyAvL2RlZmF1bHQgcG9ydFxuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICBsb2dnZXIuaW5mbygnQ29ubmVjdGluZyB0byBXZWJEcml2ZXI6ICcgKyBIT1NUICsgJzonICsgUE9SVCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNvY2tldCA9IG5ldyBuZXQuU29ja2V0KCk7XG4gICAgICAgIHRoaXMuc29ja2V0LnNldFRpbWVvdXQoU09DS0VUX1RJTUVPVVQpO1xuICAgICAgICB0aGlzLnNvY2tldC5zZXRLZWVwQWxpdmUodHJ1ZSwgMTAwMCk7XG5cbiAgICAgICAgbGV0IHNvY2tldENsaWVudCA9IHRoaXMuc29ja2V0O1xuXG4gICAgICAgIGxldCByZW1vdmVMaXN0ZW5lckhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc29ja2V0Q2xpZW50LnJlbW92ZUxpc3RlbmVyKCd0aW1lb3V0JywgdGltZW91dEhhbmRsZXIpO1xuICAgICAgICAgIHNvY2tldENsaWVudC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbG9zZUhhbmRsZXIpO1xuICAgICAgICAgIHNvY2tldENsaWVudC5yZW1vdmVMaXN0ZW5lcignZW5kJywgZW5kSGFuZGxlcik7XG4gICAgICAgICAgc29ja2V0Q2xpZW50LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9ySGFuZGxlcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQWRkIGFuICdlcnJvcicgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGNsaWVudCBzb2NrZXRcbiAgICAgICAgbGV0IGVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIChleCkge1xuICAgICAgICAgIGxvZ2dlci5lcnJvcihleCk7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgJ0NoZWNrIHRoYXQgV2ViRHJpdmVyIGlzIGVuYWJsZWQgaW4gYXBwbGljYXRpb24sIGlmIGEgZGV2aWNlIGVuc3VyZSB0aGUgcHJvcGVyIElQIGFkZHJlc3MgaXMgdXNlZC4nXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lckhhbmRsZXIoKTtcbiAgICAgICAgICBzb2NrZXRDbGllbnQuZGVzdHJveSgpO1xuICAgICAgICAgIGVycm5vID0gZXguZXJybm87XG4gICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKCdlcnJvcicsIGVycm9ySGFuZGxlcik7XG4gICAgICAgIC8vIEFkZCBhICdjbG9zZScgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGNsaWVudCBzb2NrZXRcbiAgICAgICAgbGV0IGNsb3NlSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsb2dnZXIuaW5mbygnQ29ubmVjdGlvbiBjbG9zZWQnKTtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lckhhbmRsZXIoKTtcbiAgICAgICAgICBzb2NrZXRDbGllbnQuZGVzdHJveSgpO1xuICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNvY2tldC5vbignY2xvc2UnLCBjbG9zZUhhbmRsZXIpO1xuICAgICAgICAvLyBBZGQgYSAndGltZW91dCcgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGNsaWVudCBzb2NrZXRcbiAgICAgICAgbGV0IHRpbWVvdXRIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxvZ2dlci5lcnJvcignQ29ubmVjdGlvbiB0aW1lZCBvdXQnKTtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lckhhbmRsZXIoKTtcbiAgICAgICAgICBzb2NrZXRDbGllbnQuZGVzdHJveSgpO1xuICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNvY2tldC5vbigndGltZW91dCcsIHRpbWVvdXRIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdChQT1JULCBIT1NULCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKCdDb25uZWN0aW9uIGVzdGFibGlzaGVkJyk7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXJIYW5kbGVyKCk7XG4gICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBlbmRIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxvZ2dlci5pbmZvKCdDb25uZWN0aW9uIGVuZGVkJyk7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXJIYW5kbGVyKCk7XG4gICAgICAgICAgc29ja2V0Q2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zb2NrZXQub24oJ2VuZCcsIGVuZEhhbmRsZXIpO1xuICAgICAgfSk7XG4gICAgICByZXRyeUNvdW50Kys7XG4gICAgICBjb25uZWN0ZWQgPSBhd2FpdCBjb25uZWN0ZWRQcm9taXNlO1xuXG4gICAgICBpZiAoIWNvbm5lY3RlZCAmJiBlcnJubyA9PT0gJ0VDT05OUkVGVVNFRCcpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdDb25uZWN0aW9uIHJlZnVzZWQsIHNsZWVwaW5nLi4uJyk7XG4gICAgICAgIGF3YWl0IHNsZWVwKDIwMDApO1xuICAgICAgICBlcnJubyA9ICdFT0snO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNvbm5lY3RlZCAmJiByZXRyeUNvdW50ID09PSBNQVhfUkVUUllfQ09VTlQgLSAxKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KFxuICAgICAgICAgICdGYWlsZWQgdG8gY29ubmVjdCAnICsgTUFYX1JFVFJZX0NPVU5UICsgJyB0aW1lcy4gQWJvcnRpbmcuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXRyeUNvdW50ID0gMDtcbiAgICB0aGlzLnJlYWR5ID0gY29ubmVjdGVkO1xuICB9XG5cbiAgYXN5bmMgZXhlY3V0ZVNvY2tldENvbW1hbmQgKGNtZCkge1xuICAgIGlmICghdGhpcy5zb2NrZXQud3JpdGFibGUpIHtcbiAgICAgIGxvZ2dlci5pbmZvKCdTb2NrZXQgaXMgbm90IHdyaXRhYmxlLiBUcnlpbmcgdG8gcmVjb25uZWN0LicpO1xuICAgICAgYXdhaXQgdGhpcy5jb25uZWN0U29ja2V0KCk7XG4gICAgfVxuXG4gICAgbGV0IHJldHJ5Q291bnQgPSAwO1xuICAgIHdoaWxlIChyZXRyeUNvdW50IDwgTUFYX1JFVFJZX0NPVU5UKSB7XG4gICAgICB0aGlzLnNvY2tldC5zZXRUaW1lb3V0KFNPQ0tFVF9USU1FT1VUKTtcblxuICAgICAgbGV0IGNtZFByb21pc2UgPSBuZXcgQigocmVzb2x2ZSkgPT4ge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ0NPTU1BTkQ6ICcgKyBjbWQpO1xuXG4gICAgICAgIGxldCB0b3RhbGRhdGEgPSBbXTtcbiAgICAgICAgbGV0IGVuZE1hcmtlciA9IG5ldyBCdWZmZXIuZnJvbSgneW91aWVuZCcpO1xuICAgICAgICBsZXQgc29ja2V0Q2xpZW50ID0gdGhpcy5zb2NrZXQ7XG5cbiAgICAgICAgbGV0IHJlbW92ZUxpc3RlbmVySGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzb2NrZXRDbGllbnQucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBkYXRhSGFuZGxlcik7XG4gICAgICAgICAgc29ja2V0Q2xpZW50LnJlbW92ZUxpc3RlbmVyKCd0aW1lb3V0JywgdGltZW91dEhhbmRsZXIpO1xuICAgICAgICAgIHNvY2tldENsaWVudC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCB0aW1lb3V0SGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsb2dnZXIuaW5mbygnVGltZW91dCBpbiBleGVjdXRlIGNvbW1hbmQuJyk7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXJIYW5kbGVyKCk7XG4gICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGVycm9ySGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsb2dnZXIuaW5mbygnT24gZXJyb3InKTtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lckhhbmRsZXIoKTtcbiAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZGF0YUhhbmRsZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIC8vIGRldGVybWluZSBpZiB0aGlzIGluY2x1ZGVzIGFuIGVuZCBtYXJrZXJcbiAgICAgICAgICAvLyBnZXQgbGFzdCBmZXcgdmFsdWVzIG9mIGJ1ZmZlclxuICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA+PSBlbmRNYXJrZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgZGF0YWVuZCA9IG5ldyBCdWZmZXIuYWxsb2MoZW5kTWFya2VyLmxlbmd0aCk7XG4gICAgICAgICAgICBsZXQgc3RhcnRJbmRleCA9IGRhdGEubGVuZ3RoIC0gZW5kTWFya2VyLmxlbmd0aDtcbiAgICAgICAgICAgIGRhdGEuY29weShkYXRhZW5kLCAwLCBzdGFydEluZGV4LCBzdGFydEluZGV4ICsgZW5kTWFya2VyLmxlbmd0aCk7XG4gICAgICAgICAgICBpZiAoZGF0YWVuZC5lcXVhbHMoZW5kTWFya2VyKSkge1xuICAgICAgICAgICAgICAvLyByZW1vdmUgZGF0YSBlbmRcbiAgICAgICAgICAgICAgbGV0IGxhc3REYXRhID0gZGF0YS5zbGljZSgwLCBzdGFydEluZGV4KTtcbiAgICAgICAgICAgICAgdG90YWxkYXRhLnB1c2gobGFzdERhdGEpO1xuXG4gICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVySGFuZGxlcigpO1xuXG4gICAgICAgICAgICAgIC8vIHJlc29sdmVcbiAgICAgICAgICAgICAgcmVzb2x2ZShCdWZmZXIuY29uY2F0KHRvdGFsZGF0YSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdG90YWxkYXRhLnB1c2goZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNvY2tldENsaWVudC53cml0ZShjbWQgKyAnXFxuJywgJ1VURjgnLCAoKSA9PiB7XG4gICAgICAgICAgc29ja2V0Q2xpZW50Lm9uKCdkYXRhJywgZGF0YUhhbmRsZXIpO1xuICAgICAgICAgIHNvY2tldENsaWVudC5vbigndGltZW91dCcsIHRpbWVvdXRIYW5kbGVyKTtcbiAgICAgICAgICBzb2NrZXRDbGllbnQub24oJ2Vycm9yJywgZXJyb3JIYW5kbGVyKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGxldCByZXMgPSBhd2FpdCBjbWRQcm9taXNlO1xuICAgICAgaWYgKHJlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0cnlDb3VudCsrO1xuICAgICAgICBsb2dnZXIuaW5mbygnU29ja2V0IGZhaWxlZC4gUmV0cnlpbmc6ICcgKyByZXRyeUNvdW50KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4ZWN1dGVTb2NrZXRDb21tYW5kIGZhaWxlZC4nKTtcbiAgfVxufVxuXG5mb3IgKGxldCBbY21kLCBmbl0gb2YgXy50b1BhaXJzKGNvbW1hbmRzKSkge1xuICBZb3VpRW5naW5lRHJpdmVyLnByb3RvdHlwZVtjbWRdID0gZm47XG59XG5leHBvcnQgeyBZb3VpRW5naW5lRHJpdmVyIH07XG4iXSwiZmlsZSI6ImxpYi9kcml2ZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
