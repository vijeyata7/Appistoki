"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

var _appiumIosSimulator = require("appium-ios-simulator");

var simctl = _interopRequireWildcard(require("node-simctl"));

var _basedevice = _interopRequireDefault(require("./basedevice"));

class TvOsSimulator extends _basedevice.default {
  constructor() {
    super();
    this.bundleId;
    this.caps;
    this.shell;
    this.sim;
  }

  execScript(script) {
    _logger.default.debug(`tvOS simulator: execScript`);

    script += ` --id ${this.caps.udid}`;

    try {
      return this.shell.exec(script);
    } catch (err) {
      _logger.default.debug(`Stdout: '${err.stdout}'. Stderr: '${err.stderr}'.`);

      throw new Error(`Could not run '${script}': '${err.message}'`);
    }
  }

  async closeApp() {
    _logger.default.info(`tvOS simulator: Close app`);

    await simctl.terminate(this.caps.udid, this.bundleId);
  }

  async endSession() {
    _logger.default.info(`tvOS simulator: End Session`);

    if (this.caps.fullReset) {
      await this.removeApp(this.bundleId);
    } else {
      await this.closeApp();
    }
  }

  async installApp(appPath) {
    _logger.default.info(`tvOS simulator: Installing and launching app`);

    this.bundleId = this.shell.exec(`osascript -e 'id of app "${appPath}"'`).replace(/(\r\n|\n|\r)/gm, '');
    let retry = false;

    do {
      try {
        await this.sim.installApp(appPath);
        retry = false;
      } catch (err) {
        retry = true;
      }
    } while (retry === true);

    await simctl.launch(this.caps.udid, this.bundleId);
  }

  async isAppInstalled(bundleId) {
    _logger.default.info(`tvOS simulator: Check if App is installed`);

    return await this.sim.isAppInstalled(bundleId);
  }

  async launchApp() {
    _logger.default.info(`tvOS simulator: Launching app`);

    await simctl.launch(this.caps.udid, this.bundleId);
  }

  async removeApp(bundleId) {
    _logger.default.info(`tvOS simulator: Deleting app`);

    await this.sim.removeApp(bundleId);
  }

  async startSession(caps) {
    _logger.default.info(`tvOS simulator: Start Session`);

    this.caps = caps;
    this.shell = require('shelljs');
    this.sim = await (0, _appiumIosSimulator.getSimulator)(this.caps.udid);
    await this.sim.run({
      startupTimeout: 10000
    });
    await (0, _asyncbox.sleep)(4000);
    this.bundleId = this.shell.exec(`osascript -e 'id of app "${caps.app}"'`).replace(/(\r\n|\n|\r)/gm, '');
    let devAppInstalled = await this.isAppInstalled(this.bundleId);

    if (caps.fullReset || !devAppInstalled) {
      await this.installApp(caps.app);
    } else {
      await this.launchApp(caps.app);
    }
  }

}

var _default = TvOsSimulator;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90dm9zc2ltdWxhdG9yLmpzIl0sIm5hbWVzIjpbIlR2T3NTaW11bGF0b3IiLCJCYXNlRGV2aWNlIiwiY29uc3RydWN0b3IiLCJidW5kbGVJZCIsImNhcHMiLCJzaGVsbCIsInNpbSIsImV4ZWNTY3JpcHQiLCJzY3JpcHQiLCJsb2dnZXIiLCJkZWJ1ZyIsInVkaWQiLCJleGVjIiwiZXJyIiwic3Rkb3V0Iiwic3RkZXJyIiwiRXJyb3IiLCJtZXNzYWdlIiwiY2xvc2VBcHAiLCJpbmZvIiwic2ltY3RsIiwidGVybWluYXRlIiwiZW5kU2Vzc2lvbiIsImZ1bGxSZXNldCIsInJlbW92ZUFwcCIsImluc3RhbGxBcHAiLCJhcHBQYXRoIiwicmVwbGFjZSIsInJldHJ5IiwibGF1bmNoIiwiaXNBcHBJbnN0YWxsZWQiLCJsYXVuY2hBcHAiLCJzdGFydFNlc3Npb24iLCJyZXF1aXJlIiwicnVuIiwic3RhcnR1cFRpbWVvdXQiLCJhcHAiLCJkZXZBcHBJbnN0YWxsZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxhQUFOLFNBQTRCQyxtQkFBNUIsQ0FBdUM7QUFFckNDLEVBQUFBLFdBQVcsR0FBSTtBQUNiO0FBQ0EsU0FBS0MsUUFBTDtBQUNBLFNBQUtDLElBQUw7QUFDQSxTQUFLQyxLQUFMO0FBQ0EsU0FBS0MsR0FBTDtBQUNEOztBQUVEQyxFQUFBQSxVQUFVLENBQUVDLE1BQUYsRUFBVTtBQUNsQkMsb0JBQU9DLEtBQVAsQ0FBYyw0QkFBZDs7QUFDQUYsSUFBQUEsTUFBTSxJQUFLLFNBQVEsS0FBS0osSUFBTCxDQUFVTyxJQUFLLEVBQWxDOztBQUNBLFFBQUk7QUFDRixhQUFPLEtBQUtOLEtBQUwsQ0FBV08sSUFBWCxDQUFnQkosTUFBaEIsQ0FBUDtBQUNELEtBRkQsQ0FFRSxPQUFPSyxHQUFQLEVBQVk7QUFDWkosc0JBQU9DLEtBQVAsQ0FBYyxZQUFXRyxHQUFHLENBQUNDLE1BQU8s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QTVCOztBQUNBLFFBQUlDLElBQUksQ0FBQ21CLFNBQUwsSUFBa0IsQ0FBQ2MsZUFBdkIsRUFBd0M7QUFDdEMsWUFBTSxLQUFLWixVQUFMLENBQWdCckIsSUFBSSxDQUFDZ0MsR0FBckIsQ0FBTjtBQUNELEtBRkQsTUFFTztBQUNMLFlBQU0sS0FBS0wsU0FBTCxDQUFlM0IsSUFBSSxDQUFDZ0MsR0FBcEIsQ0FBTjtBQUNEO0FBQ0Y7O0FBckZvQzs7ZUF1RnhCcEMsYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgeyBnZXRTaW11bGF0b3IgfSBmcm9tICdhcHBpdW0taW9zLXNpbXVsYXRvcic7XG5pbXBvcnQgKiBhcyBzaW1jdGwgZnJvbSAnbm9kZS1zaW1jdGwnO1xuaW1wb3J0IEJhc2VEZXZpY2UgZnJvbSAnLi9iYXNlZGV2aWNlJztcblxuY2xhc3MgVHZPc1NpbXVsYXRvciBleHRlbmRzIEJhc2VEZXZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYnVuZGxlSWQ7XG4gICAgdGhpcy5jYXBzO1xuICAgIHRoaXMuc2hlbGw7XG4gICAgdGhpcy5zaW07XG4gIH1cblxuICBleGVjU2NyaXB0IChzY3JpcHQpIHtcbiAgICBsb2dnZXIuZGVidWcoYHR2T1Mgc2ltdWxhdG9yOiBleGVjU2NyaXB0YCk7XG4gICAgc2NyaXB0ICs9IGAgLS1pZCAke3RoaXMuY2Fwcy51ZGlkfWA7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB0aGlzLnNoZWxsLmV4ZWMoc2NyaXB0KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhgU3Rkb3V0OiAnJHtlcnIuc3Rkb3V0fScuIFN0ZGVycjogJyR7ZXJyLnN0ZGVycn0nLmApO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgcnVuICcke3NjcmlwdH0nOiAnJHtlcnIubWVzc2FnZX0nYCk7XG4gICAgfVxuICB9XG5cblxuICBhc3luYyBjbG9zZUFwcCAoKSB7XG4gICAgbG9nZ2VyLmluZm8oYHR2T1Mgc2ltdWxhdG9yOiBDbG9zZSBhcHBgKTtcbiAgICBhd2FpdCBzaW1jdGwudGVybWluYXRlKHRoaXMuY2Fwcy51ZGlkLCB0aGlzLmJ1bmRsZUlkKTtcbiAgfVxuXG4gIGFzeW5jIGVuZFNlc3Npb24gKCkge1xuICAgIGxvZ2dlci5pbmZvKGB0dk9TIHNpbXVsYXRvcjogRW5kIFNlc3Npb25gKTtcbiAgICAvLyBJZiBtdWx0aXBsZSBhcHBzIHdpdGggb3VyIHNvY2tldCBhcmUgaW5zdGFsbGVkLCBpdCB3aWxsIGNvbm5lY3QgdG8gdGhlIGZpcnN0IGFwcCBpbnN0YWxsZWQuXG4gICAgLy8gRm9yIHRoaXMgcmVhc29uLCBldmVyeSBhcHAgc2hvdWxkIGJlIHVuaW5zdGFsbGVkIGFmdGVyIHJ1bm5pbmcuXG4gICAgaWYgKHRoaXMuY2Fwcy5mdWxsUmVzZXQpIHtcbiAgICAgIGF3YWl0IHRoaXMucmVtb3ZlQXBwKHRoaXMuYnVuZGxlSWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLmNsb3NlQXBwKCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgaW5zdGFsbEFwcCAoYXBwUGF0aCkge1xuICAgIGxvZ2dlci5pbmZvKGB0dk9TIHNpbXVsYXRvcjogSW5zdGFsbGluZyBhbmQgbGF1bmNoaW5nIGFwcGApO1xuICAgIHRoaXMuYnVuZGxlSWQgPSB0aGlzLnNoZWxsLmV4ZWMoYG9zYXNjcmlwdCAtZSAnaWQgb2YgYXBwIFwiJHthcHBQYXRofVwiJ2ApLnJlcGxhY2UoLyhcXHJcXG58XFxufFxccikvZ20sICcnKTtcbiAgICBsZXQgcmV0cnkgPSBmYWxzZTtcbiAgICBkbyB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLnNpbS5pbnN0YWxsQXBwKGFwcFBhdGgpO1xuICAgICAgICByZXRyeSA9IGZhbHNlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHJ5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKHJldHJ5ID09PSB0cnVlKTtcbiAgICBhd2FpdCBzaW1jdGwubGF1bmNoKHRoaXMuY2Fwcy51ZGlkLCB0aGlzLmJ1bmRsZUlkKTtcbiAgfVxuXG4gIGFzeW5jIGlzQXBwSW5zdGFsbGVkIChidW5kbGVJZCkge1xuICAgIGxvZ2dlci5pbmZvKGB0dk9TIHNpbXVsYXRvcjogQ2hlY2sgaWYgQXBwIGlzIGluc3RhbGxlZGApO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnNpbS5pc0FwcEluc3RhbGxlZChidW5kbGVJZCk7XG4gIH1cblxuICBhc3luYyBsYXVuY2hBcHAgKCkge1xuICAgIGxvZ2dlci5pbmZvKGB0dk9TIHNpbXVsYXRvcjogTGF1bmNoaW5nIGFwcGApO1xuICAgIGF3YWl0IHNpbWN0bC5sYXVuY2godGhpcy5jYXBzLnVkaWQsIHRoaXMuYnVuZGxlSWQpO1xuICB9XG5cbiAgYXN5bmMgcmVtb3ZlQXBwIChidW5kbGVJZCkge1xuICAgIGxvZ2dlci5pbmZvKGB0dk9TIHNpbXVsYXRvcjogRGVsZXRpbmcgYXBwYCk7XG4gICAgYXdhaXQgdGhpcy5zaW0ucmVtb3ZlQXBwKGJ1bmRsZUlkKTtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0U2Vzc2lvbiAoY2Fwcykge1xuICAgIGxvZ2dlci5pbmZvKGB0dk9TIHNpbXVsYXRvcjogU3RhcnQgU2Vzc2lvbmApO1xuICAgIHRoaXMuY2FwcyA9IGNhcHM7XG4gICAgdGhpcy5zaGVsbCA9IHJlcXVpcmUoJ3NoZWxsanMnKTtcblxuICAgIHRoaXMuc2ltID0gYXdhaXQgZ2V0U2ltdWxhdG9yKHRoaXMuY2Fwcy51ZGlkKTtcbiAgICBhd2FpdCB0aGlzLnNpbS5ydW4oe3N0YXJ0dXBUaW1lb3V0OiAxMDAwMH0pO1xuICAgIGF3YWl0IHNsZWVwKDQwMDApO1xuICAgIC8vIENoZWNrIGlmIGFwcCBpcyBpbnN0YWxsZWRcbiAgICB0aGlzLmJ1bmRsZUlkID0gdGhpcy5zaGVsbC5leGVjKGBvc2FzY3JpcHQgLWUgJ2lkIG9mIGFwcCBcIiR7Y2Fwcy5hcHB9XCInYCkucmVwbGFjZSgvKFxcclxcbnxcXG58XFxyKS9nbSwgJycpO1xuICAgIGxldCBkZXZBcHBJbnN0YWxsZWQgPSBhd2FpdCB0aGlzLmlzQXBwSW5zdGFsbGVkKHRoaXMuYnVuZGxlSWQpO1xuICAgIGlmIChjYXBzLmZ1bGxSZXNldCB8fCAhZGV2QXBwSW5zdGFsbGVkKSB7XG4gICAgICBhd2FpdCB0aGlzLmluc3RhbGxBcHAoY2Fwcy5hcHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLmxhdW5jaEFwcChjYXBzLmFwcCk7XG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBUdk9zU2ltdWxhdG9yO1xuIl0sImZpbGUiOiJsaWIvdHZvc3NpbXVsYXRvci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
