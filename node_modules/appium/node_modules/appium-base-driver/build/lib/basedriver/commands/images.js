"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MATCH_TEMPLATE_MODE = exports.DEFAULT_MATCH_THRESHOLD = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _errors = require("../../protocol/errors");

var _appiumSupport = require("appium-support");

const commands = {},
      helpers = {},
      extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const MATCH_FEATURES_MODE = 'matchFeatures';
const GET_SIMILARITY_MODE = 'getSimilarity';
const MATCH_TEMPLATE_MODE = 'matchTemplate';
exports.MATCH_TEMPLATE_MODE = MATCH_TEMPLATE_MODE;
const DEFAULT_MATCH_THRESHOLD = 0.4;
exports.DEFAULT_MATCH_THRESHOLD = DEFAULT_MATCH_THRESHOLD;

commands.compareImages = async function compareImages(mode, firstImage, secondImage, options = {}) {
  const img1 = Buffer.from(firstImage, 'base64');
  const img2 = Buffer.from(secondImage, 'base64');
  let result = null;

  switch (_lodash.default.toLower(mode)) {
    case MATCH_FEATURES_MODE.toLowerCase():
      result = await _appiumSupport.imageUtil.getImagesMatches(img1, img2, options);
      break;

    case GET_SIMILARITY_MODE.toLowerCase():
      result = await _appiumSupport.imageUtil.getImagesSimilarity(img1, img2, options);
      break;

    case MATCH_TEMPLATE_MODE.toLowerCase():
      result = await _appiumSupport.imageUtil.getImageOccurrence(img1, img2, options);

      if (options.multiple) {
        return result.multiple.map(convertVisualizationToBase64);
      }

      break;

    default:
      throw new _errors.errors.InvalidArgumentError(`'${mode}' images comparison mode is unknown. ` + `Only ${JSON.stringify([MATCH_FEATURES_MODE, GET_SIMILARITY_MODE, MATCH_TEMPLATE_MODE])} modes are supported.`);
  }

  return convertVisualizationToBase64(result);
};

function convertVisualizationToBase64(element) {
  if (_lodash.default.isString(element.visualization)) {
    element.visualization = element.visualization.toString('base64');
  }

  return element;
}

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2ltYWdlcy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiTUFUQ0hfRkVBVFVSRVNfTU9ERSIsIkdFVF9TSU1JTEFSSVRZX01PREUiLCJNQVRDSF9URU1QTEFURV9NT0RFIiwiREVGQVVMVF9NQVRDSF9USFJFU0hPTEQiLCJjb21wYXJlSW1hZ2VzIiwibW9kZSIsImZpcnN0SW1hZ2UiLCJzZWNvbmRJbWFnZSIsIm9wdGlvbnMiLCJpbWcxIiwiQnVmZmVyIiwiZnJvbSIsImltZzIiLCJyZXN1bHQiLCJfIiwidG9Mb3dlciIsInRvTG93ZXJDYXNlIiwiaW1hZ2VVdGlsIiwiZ2V0SW1hZ2VzTWF0Y2hlcyIsImdldEltYWdlc1NpbWlsYXJpdHkiLCJnZXRJbWFnZU9jY3VycmVuY2UiLCJtdWx0aXBsZSIsIm1hcCIsImNvbnZlcnRWaXN1YWxpemF0aW9uVG9CYXNlNjQiLCJlcnJvcnMiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJlbGVtZW50IiwiaXNTdHJpbmciLCJ2aXN1YWxpemF0aW9uIiwidG9TdHJpbmciLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsUUFBUSxHQUFHLEVBQWpCO0FBQUEsTUFBcUJDLE9BQU8sR0FBRyxFQUEvQjtBQUFBLE1BQW1DQyxVQUFVLEdBQUcsRUFBaEQ7OztBQUVBLE1BQU1DLG1CQUFtQixHQUFHLGVBQTVCO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsZUFBNUI7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxlQUE1Qjs7QUFFQSxNQUFNQyx1QkFBdUIsR0FBRyxHQUFoQzs7O0FBcUNBTixRQUFRLENBQUNPLGFBQVQsR0FBeUIsZUFBZUEsYUFBZixDQUE4QkMsSUFBOUIsRUFBb0NDLFVBQXBDLEVBQWdEQyxXQUFoRCxFQUE2REMsT0FBTyxHQUFHLEVBQXZFLEVBQTJFO0FBQ2xHLFFBQU1DLElBQUksR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlMLFVBQVosRUFBd0IsUUFBeEIsQ0FBYjtBQUNBLFFBQU1NLElBQUksR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlKLFdBQVosRUFBeUIsUUFBekIsQ0FBYjtBQUNBLE1BQUlNLE1BQU0sR0FBRyxJQUFiOztBQUVBLFVBQVFDLGdCQUFFQyxPQUFGLENBQVVWLElBQVYsQ0FBUjtBQUNFLFNBQUtMLG1CQUFtQixDQUFDZ0IsV0FBcEIsRUFBTDtBQUNFSCxNQUFBQSxNQUFNLEdBQUcsTUFBTUkseUJBQVVDLGdCQUFWLENBQTJCVCxJQUEzQixFQUFpQ0csSUFBakMsRUFBdUNKLE9BQXZDLENBQWY7QUFDQTs7QUFDRixTQUFLUCxtQkFBbUIsQ0FBQ2UsV0FBcEIsRUFBTDtBQUNFSCxNQUFBQSxNQUFNLEdBQUcsTUFBTUkseUJBQVVFLG1CQUFWLENBQThCVixJQUE5QixFQUFvQ0csSUFBcEMsRUFBMENKLE9BQTFDLENBQWY7QUFDQTs7QUFDRixTQUFLTixtQkFBbUIsQ0FBQ2MsV0FBcEIsRUFBTDtBQUVFSCxNQUFBQSxNQUFNLEdBQUcsTUFBTUkseUJBQVVHLGtCQUFWLENBQTZCWCxJQUE3QixFQUFtQ0csSUFBbkMsRUFBeUNKLE9BQXpDLENBQWY7O0FBRUEsVUFBSUEsT0FBTyxDQUFDYSxRQUFaLEVBQXNCO0FBQ3BCLGVBQU9SLE1BQU0sQ0FBQ1EsUUFBUCxDQUFnQkMsR0FBaEIsQ0FBb0JDLDRCQUFwQixDQUFQO0FBQ0Q7O0FBQ0Q7O0FBQ0Y7QUFDRSxZQUFNLElBQUlDLGVBQU9DLG9CQUFYLENBQWlDLElBQUdwQixJQUFLLHVDQUFULEdBQ25DLFFBQU9xQixJQUFJLENBQUNDLFNBQUwsQ0FBZSxDQUFDM0IsbUJBQUQsRUFBc0JDLG1CQUF0QixFQUEyQ0MsbUJBQTNDLENBQWYsQ0FBZ0YsdUJBRHBGLENBQU47QUFoQko7O0FBb0JBLFNBQU9xQiw0QkFBNEIsQ0FBQ1YsTUFBRCxDQUFuQztBQUNELENBMUJEOztBQW1DQSxTQUFTVSw0QkFBVCxDQUF1Q0ssT0FBdkMsRUFBZ0Q7QUFDOUMsTUFBSWQsZ0JBQUVlLFFBQUYsQ0FBV0QsT0FBTyxDQUFDRSxhQUFuQixDQUFKLEVBQXVDO0FBQ3JDRixJQUFBQSxPQUFPLENBQUNFLGFBQVIsR0FBd0JGLE9BQU8sQ0FBQ0UsYUFBUixDQUFzQkMsUUFBdEIsQ0FBK0IsUUFBL0IsQ0FBeEI7QUFDRDs7QUFFRCxTQUFPSCxPQUFQO0FBQ0Q7O0FBRURJLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjbEMsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnLi4vLi4vcHJvdG9jb2wvZXJyb3JzJztcbmltcG9ydCB7IGltYWdlVXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuY29uc3QgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbnN0IE1BVENIX0ZFQVRVUkVTX01PREUgPSAnbWF0Y2hGZWF0dXJlcyc7XG5jb25zdCBHRVRfU0lNSUxBUklUWV9NT0RFID0gJ2dldFNpbWlsYXJpdHknO1xuY29uc3QgTUFUQ0hfVEVNUExBVEVfTU9ERSA9ICdtYXRjaFRlbXBsYXRlJztcblxuY29uc3QgREVGQVVMVF9NQVRDSF9USFJFU0hPTEQgPSAwLjQ7XG5cbi8qKlxuICogUGVyZm9ybXMgaW1hZ2VzIGNvbXBhcmlzb24gdXNpbmcgT3BlbkNWIGZyYW1ld29yayBmZWF0dXJlcy5cbiAqIEl0IGlzIGV4cGVjdGVkIHRoYXQgYm90aCBPcGVuQ1YgZnJhbWV3b3JrIGFuZCBvcGVuY3Y0bm9kZWpzXG4gKiBtb2R1bGUgYXJlIGluc3RhbGxlZCBvbiB0aGUgbWFjaGluZSB3aGVyZSBBcHBpdW0gc2VydmVyIGlzIHJ1bm5pbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZGUgLSBPbmUgb2YgcG9zc2libGUgY29tcGFyaXNvbiBtb2RlczpcbiAqIG1hdGNoRmVhdHVyZXMsIGdldFNpbWlsYXJpdHksIG1hdGNoVGVtcGxhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaXJzdEltYWdlIC0gQmFzZTY0LWVuY29kZWQgaW1hZ2UgZmlsZS5cbiAqIEFsbCBpbWFnZSBmb3JtYXRzLCB0aGF0IE9wZW5DViBsaWJyYXJ5IGl0c2VsZiBhY2NlcHRzLCBhcmUgc3VwcG9ydGVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHNlY29uZEltYWdlIC0gQmFzZTY0LWVuY29kZWQgaW1hZ2UgZmlsZS5cbiAqIEFsbCBpbWFnZSBmb3JtYXRzLCB0aGF0IE9wZW5DViBsaWJyYXJ5IGl0c2VsZiBhY2NlcHRzLCBhcmUgc3VwcG9ydGVkLlxuICogQHBhcmFtIHs/T2JqZWN0fSBvcHRpb25zIFt7fV0gLSBUaGUgY29udGVudCBvZiB0aGlzIGRpY3Rpb25hcnkgZGVwZW5kc1xuICogb24gdGhlIGFjdHVhbCBgbW9kZWAgdmFsdWUuXG4gKiBGb3IgTUFUQ0hfVEVNUExBVEVfTU9ERTpcbiAqICAgLSB2aXN1YWxpemU6IGluY2x1ZGUgdGhlIHZpc3VhbGl6YXRpb24gb2YgdGhlIG1hdGNoIGluIHRoZSByZXN1bHRcbiAqICAgICAgICAgICAgICAgIChkZWZhdWx0OiBmYWxzZSlcbiAqICAgLSB0aHJlc2hvbGQ6IHRoZSBpbWFnZSBtYXRjaCB0aHJlc2hvbGQsIGhpZ2hlciB2YWx1ZXNcbiAqICAgICAgICAgICAgICAgIHJlcXVpcmUgYSBjbG9zZXIgaW1hZ2Ugc2ltaWxhcml0eSB0byBtYXRjaFxuICogICAgICAgICAgICAgICAgKGRlZmF1bHQ6IDAuNSlcbiAqICAgLSBtdWx0aXBsZTogcmV0dXJuIG11bHRpcGxlIG1hdGNoZXMgaW4gdGhlIGltYWdlXG4gKiAgICAgICAgICAgICAgIChkZWZhdWx0OiBmYWxzZSlcbiAqICAgLSBtYXRjaE5laWdoYm91clRocmVzaG9sZDogaWYgbXVsdGlwbGUgaXMgc3BlY2lmaWVkLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRlcm1pbmUgdGhlIG51bWJlciBvZiBwaXhlbHMgd2l0aGluXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoIHRvIGNvbnNpZGVyIGEgcGl4ZWwgYXMgcGFydCBvZiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FtZSBtYXRjaCByZXN1bHRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlZmF1bHQ6IDEwKVxuICogU2VlIHRoZSBkb2N1bWVudGF0aW9uIGluIHRoZSBgYXBwaXVtLXN1cHBvcnRgXG4gKiBtb2R1bGUgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBjb250ZW50IG9mIHRoZSByZXN1bHRpbmcgZGljdGlvbmFyeSBkZXBlbmRzXG4gKiBvbiB0aGUgYWN0dWFsIGBtb2RlYCBhbmQgYG9wdGlvbnNgIHZhbHVlcy4gU2VlIHRoZSBkb2N1bWVudGF0aW9uIG9uXG4gKiBgYXBwaXVtLXN1cHBvcnRgIG1vZHVsZSBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHRocm93cyB7RXJyb3J9IElmIHJlcXVpcmVkIE9wZW5DViBtb2R1bGVzIGFyZSBub3QgaW5zdGFsbGVkIG9yXG4gKiBpZiBgbW9kZWAgdmFsdWUgaXMgaW5jb3JyZWN0IG9yIGlmIHRoZXJlIHdhcyBhbiB1bmV4cGVjdGVkIGlzc3VlIHdoaWxlXG4gKiBtYXRjaGluZyB0aGUgaW1hZ2VzLlxuICovXG5jb21tYW5kcy5jb21wYXJlSW1hZ2VzID0gYXN5bmMgZnVuY3Rpb24gY29tcGFyZUltYWdlcyAobW9kZSwgZmlyc3RJbWFnZSwgc2Vjb25kSW1hZ2UsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBpbWcxID0gQnVmZmVyLmZyb20oZmlyc3RJbWFnZSwgJ2Jhc2U2NCcpO1xuICBjb25zdCBpbWcyID0gQnVmZmVyLmZyb20oc2Vjb25kSW1hZ2UsICdiYXNlNjQnKTtcbiAgbGV0IHJlc3VsdCA9IG51bGw7XG5cbiAgc3dpdGNoIChfLnRvTG93ZXIobW9kZSkpIHtcbiAgICBjYXNlIE1BVENIX0ZFQVRVUkVTX01PREUudG9Mb3dlckNhc2UoKTpcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGltYWdlVXRpbC5nZXRJbWFnZXNNYXRjaGVzKGltZzEsIGltZzIsIG9wdGlvbnMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBHRVRfU0lNSUxBUklUWV9NT0RFLnRvTG93ZXJDYXNlKCk6XG4gICAgICByZXN1bHQgPSBhd2FpdCBpbWFnZVV0aWwuZ2V0SW1hZ2VzU2ltaWxhcml0eShpbWcxLCBpbWcyLCBvcHRpb25zKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTUFUQ0hfVEVNUExBVEVfTU9ERS50b0xvd2VyQ2FzZSgpOlxuICAgICAgLy8gZmlyc3RJbWFnZS9pbWcxIGlzIHRoZSBmdWxsIGltYWdlIGFuZCBzZWNvbmRJbWFnZS9pbWcyIGlzIHRoZSBwYXJ0aWFsIG9uZVxuICAgICAgcmVzdWx0ID0gYXdhaXQgaW1hZ2VVdGlsLmdldEltYWdlT2NjdXJyZW5jZShpbWcxLCBpbWcyLCBvcHRpb25zKTtcblxuICAgICAgaWYgKG9wdGlvbnMubXVsdGlwbGUpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5tdWx0aXBsZS5tYXAoY29udmVydFZpc3VhbGl6YXRpb25Ub0Jhc2U2NCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgJyR7bW9kZX0nIGltYWdlcyBjb21wYXJpc29uIG1vZGUgaXMgdW5rbm93bi4gYCArXG4gICAgICAgIGBPbmx5ICR7SlNPTi5zdHJpbmdpZnkoW01BVENIX0ZFQVRVUkVTX01PREUsIEdFVF9TSU1JTEFSSVRZX01PREUsIE1BVENIX1RFTVBMQVRFX01PREVdKX0gbW9kZXMgYXJlIHN1cHBvcnRlZC5gKTtcbiAgfVxuXG4gIHJldHVybiBjb252ZXJ0VmlzdWFsaXphdGlvblRvQmFzZTY0KHJlc3VsdCk7XG59O1xuXG4vKipcbiAqIGJhc2U2NCBlbmNvZGVzIHRoZSB2aXN1YWxpemF0aW9uIHBhcnQgb2YgdGhlIHJlc3VsdFxuICogKGlmIG5lY2Vzc2FyeSlcbiAqXG4gKiBAcGFyYW0ge09jY3VyZW5jZVJlc3VsdH0gZWxlbWVudCAtIG9jY3VycmVuY2UgcmVzdWx0XG4gKlxuICoqL1xuZnVuY3Rpb24gY29udmVydFZpc3VhbGl6YXRpb25Ub0Jhc2U2NCAoZWxlbWVudCkge1xuICBpZiAoXy5pc1N0cmluZyhlbGVtZW50LnZpc3VhbGl6YXRpb24pKSB7XG4gICAgZWxlbWVudC52aXN1YWxpemF0aW9uID0gZWxlbWVudC52aXN1YWxpemF0aW9uLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzLCBERUZBVUxUX01BVENIX1RIUkVTSE9MRCwgTUFUQ0hfVEVNUExBVEVfTU9ERSB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2Jhc2Vkcml2ZXIvY29tbWFuZHMvaW1hZ2VzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=
