"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _constants = require("../constants");

const commands = {};
const POWER_SHELL_SCRIPT_PATTERN = /^powerShell$/;
const WINDOWS_EXTENSION_SCRIPT_PATTERN = /^windows:/;
const EXTENSION_COMMANDS_MAPPING = {
  startRecordingScreen: 'startRecordingScreen',
  stopRecordingScreen: 'stopRecordingScreen'
};

commands.execute = async function execute(script, args) {
  if (WINDOWS_EXTENSION_SCRIPT_PATTERN.test(script)) {
    _logger.default.info(`Executing extension command '${script}'`);

    script = script.replace(WINDOWS_EXTENSION_SCRIPT_PATTERN, '').trim();
    return await this.executeWindowsCommand(script, _lodash.default.isArray(args) ? args[0] : args);
  } else if (POWER_SHELL_SCRIPT_PATTERN.test(script)) {
    this.ensureFeatureEnabled(_constants.POWER_SHELL_FEATURE);
    return await this.execPowerShell(_lodash.default.isArray(args) ? _lodash.default.first(args) : args);
  }

  throw new _appiumBaseDriver.errors.NotImplementedError();
};

commands.executeWindowsCommand = async function executeWindowsCommand(command, opts = {}) {
  if (!_lodash.default.has(EXTENSION_COMMANDS_MAPPING, command)) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown windows command '${command}'. ` + `Only ${_lodash.default.keys(EXTENSION_COMMANDS_MAPPING)} commands are supported.`);
  }

  return await this[EXTENSION_COMMANDS_MAPPING[command]](opts);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiUE9XRVJfU0hFTExfU0NSSVBUX1BBVFRFUk4iLCJXSU5ET1dTX0VYVEVOU0lPTl9TQ1JJUFRfUEFUVEVSTiIsIkVYVEVOU0lPTl9DT01NQU5EU19NQVBQSU5HIiwic3RhcnRSZWNvcmRpbmdTY3JlZW4iLCJzdG9wUmVjb3JkaW5nU2NyZWVuIiwiZXhlY3V0ZSIsInNjcmlwdCIsImFyZ3MiLCJ0ZXN0IiwibG9nIiwiaW5mbyIsInJlcGxhY2UiLCJ0cmltIiwiZXhlY3V0ZVdpbmRvd3NDb21tYW5kIiwiXyIsImlzQXJyYXkiLCJlbnN1cmVGZWF0dXJlRW5hYmxlZCIsIlBPV0VSX1NIRUxMX0ZFQVRVUkUiLCJleGVjUG93ZXJTaGVsbCIsImZpcnN0IiwiZXJyb3JzIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsImNvbW1hbmQiLCJvcHRzIiwiaGFzIiwiVW5rbm93bkNvbW1hbmRFcnJvciIsImtleXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsUUFBUSxHQUFHLEVBQWpCO0FBRUEsTUFBTUMsMEJBQTBCLEdBQUcsY0FBbkM7QUFDQSxNQUFNQyxnQ0FBZ0MsR0FBRyxXQUF6QztBQUNBLE1BQU1DLDBCQUEwQixHQUFHO0FBQ2pDQyxFQUFBQSxvQkFBb0IsRUFBRSxzQkFEVztBQUVqQ0MsRUFBQUEsbUJBQW1CLEVBQUU7QUFGWSxDQUFuQzs7QUFLQUwsUUFBUSxDQUFDTSxPQUFULEdBQW1CLGVBQWVBLE9BQWYsQ0FBd0JDLE1BQXhCLEVBQWdDQyxJQUFoQyxFQUFzQztBQUN2RCxNQUFJTixnQ0FBZ0MsQ0FBQ08sSUFBakMsQ0FBc0NGLE1BQXRDLENBQUosRUFBbUQ7QUFDakRHLG9CQUFJQyxJQUFKLENBQVUsZ0NBQStCSixNQUFPLEdBQWhEOztBQUNBQSxJQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0ssT0FBUCxDQUFlVixnQ0FBZixFQUFpRCxFQUFqRCxFQUFxRFcsSUFBckQsRUFBVDtBQUNBLFdBQU8sTUFBTSxLQUFLQyxxQkFBTCxDQUEyQlAsTUFBM0IsRUFBbUNRLGdCQUFFQyxPQUFGLENBQVVSLElBQVYsSUFBa0JBLElBQUksQ0FBQyxDQUFELENBQXRCLEdBQTRCQSxJQUEvRCxDQUFiO0FBQ0QsR0FKRCxNQUlPLElBQUlQLDBCQUEwQixDQUFDUSxJQUEzQixDQUFnQ0YsTUFBaEMsQ0FBSixFQUE2QztBQUNsRCxTQUFLVSxvQkFBTCxDQUEwQkMsOEJBQTFCO0FBQ0EsV0FBTyxNQUFNLEtBQUtDLGNBQUwsQ0FBb0JKLGdCQUFFQyxPQUFGLENBQVVSLElBQVYsSUFBa0JPLGdCQUFFSyxLQUFGLENBQVFaLElBQVIsQ0FBbEIsR0FBa0NBLElBQXRELENBQWI7QUFDRDs7QUFDRCxRQUFNLElBQUlhLHlCQUFPQyxtQkFBWCxFQUFOO0FBQ0QsQ0FWRDs7QUFZQXRCLFFBQVEsQ0FBQ2MscUJBQVQsR0FBaUMsZUFBZUEscUJBQWYsQ0FBc0NTLE9BQXRDLEVBQStDQyxJQUFJLEdBQUcsRUFBdEQsRUFBMEQ7QUFDekYsTUFBSSxDQUFDVCxnQkFBRVUsR0FBRixDQUFNdEIsMEJBQU4sRUFBa0NvQixPQUFsQyxDQUFMLEVBQWlEO0FBQy9DLFVBQU0sSUFBSUYseUJBQU9LLG1CQUFYLENBQWdDLDRCQUEyQkgsT0FBUSxLQUFwQyxHQUNsQyxRQUFPUixnQkFBRVksSUFBRixDQUFPeEIsMEJBQVAsQ0FBbUMsMEJBRHZDLENBQU47QUFFRDs7QUFDRCxTQUFPLE1BQU0sS0FBS0EsMEJBQTBCLENBQUNvQixPQUFELENBQS9CLEVBQTBDQyxJQUExQyxDQUFiO0FBQ0QsQ0FORDs7ZUFRZXhCLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IFBPV0VSX1NIRUxMX0ZFQVRVUkUgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5jb25zdCBjb21tYW5kcyA9IHt9O1xuXG5jb25zdCBQT1dFUl9TSEVMTF9TQ1JJUFRfUEFUVEVSTiA9IC9ecG93ZXJTaGVsbCQvO1xuY29uc3QgV0lORE9XU19FWFRFTlNJT05fU0NSSVBUX1BBVFRFUk4gPSAvXndpbmRvd3M6LztcbmNvbnN0IEVYVEVOU0lPTl9DT01NQU5EU19NQVBQSU5HID0ge1xuICBzdGFydFJlY29yZGluZ1NjcmVlbjogJ3N0YXJ0UmVjb3JkaW5nU2NyZWVuJyxcbiAgc3RvcFJlY29yZGluZ1NjcmVlbjogJ3N0b3BSZWNvcmRpbmdTY3JlZW4nLFxufTtcblxuY29tbWFuZHMuZXhlY3V0ZSA9IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGUgKHNjcmlwdCwgYXJncykge1xuICBpZiAoV0lORE9XU19FWFRFTlNJT05fU0NSSVBUX1BBVFRFUk4udGVzdChzY3JpcHQpKSB7XG4gICAgbG9nLmluZm8oYEV4ZWN1dGluZyBleHRlbnNpb24gY29tbWFuZCAnJHtzY3JpcHR9J2ApO1xuICAgIHNjcmlwdCA9IHNjcmlwdC5yZXBsYWNlKFdJTkRPV1NfRVhURU5TSU9OX1NDUklQVF9QQVRURVJOLCAnJykudHJpbSgpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVXaW5kb3dzQ29tbWFuZChzY3JpcHQsIF8uaXNBcnJheShhcmdzKSA/IGFyZ3NbMF0gOiBhcmdzKTtcbiAgfSBlbHNlIGlmIChQT1dFUl9TSEVMTF9TQ1JJUFRfUEFUVEVSTi50ZXN0KHNjcmlwdCkpIHtcbiAgICB0aGlzLmVuc3VyZUZlYXR1cmVFbmFibGVkKFBPV0VSX1NIRUxMX0ZFQVRVUkUpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWNQb3dlclNoZWxsKF8uaXNBcnJheShhcmdzKSA/IF8uZmlyc3QoYXJncykgOiBhcmdzKTtcbiAgfVxuICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbn07XG5cbmNvbW1hbmRzLmV4ZWN1dGVXaW5kb3dzQ29tbWFuZCA9IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVXaW5kb3dzQ29tbWFuZCAoY29tbWFuZCwgb3B0cyA9IHt9KSB7XG4gIGlmICghXy5oYXMoRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkcsIGNvbW1hbmQpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duQ29tbWFuZEVycm9yKGBVbmtub3duIHdpbmRvd3MgY29tbWFuZCAnJHtjb21tYW5kfScuIGAgK1xuICAgICAgYE9ubHkgJHtfLmtleXMoRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkcpfSBjb21tYW5kcyBhcmUgc3VwcG9ydGVkLmApO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzW0VYVEVOU0lPTl9DT01NQU5EU19NQVBQSU5HW2NvbW1hbmRdXShvcHRzKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZXhlY3V0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
