"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initMJpegServer = initMJpegServer;
exports.TEST_IMG_JPG = exports.MJpegStream = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _http = _interopRequireDefault(require("http"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _imageUtil = require("./image-util");

var _mjpegServer = _interopRequireDefault(require("mjpeg-server"));

var _stream = require("stream");

var _node = require("./node");

var _axios = _interopRequireDefault(require("axios"));

let MJpegConsumer = null;

async function initMJpegConsumer() {
  if (!MJpegConsumer) {
    try {
      MJpegConsumer = await (0, _node.requirePackage)('mjpeg-consumer');
    } catch (ign) {}
  }

  if (!MJpegConsumer) {
    throw new Error('mjpeg-consumer module is required to use MJPEG-over-HTTP features. ' + 'Please install it first (npm i -g mjpeg-consumer) and restart Appium.');
  }
}

const TEST_IMG_JPG = '/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAAAeAAD/4QOBaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzE0MCA3OS4xNjA0NTEsIDIwMTcvMDUvMDYtMDE6MDg6MjEgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6NGY5ODc1OTctZGE2My00Y2M0LTkzNDMtNGYyNjgzMGUwNjk3IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjlDMzI3QkY0N0Q3NTExRThCMTlDOTVDMDc2RDE5MDY5IiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjlDMzI3QkYzN0Q3NTExRThCMTlDOTVDMDc2RDE5MDY5IiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE4IChNYWNpbnRvc2gpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NGY5ODc1OTctZGE2My00Y2M0LTkzNDMtNGYyNjgzMGUwNjk3IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjRmOTg3NTk3LWRhNjMtNGNjNC05MzQzLTRmMjY4MzBlMDY5NyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv/uAA5BZG9iZQBkwAAAAAH/2wCEABALCwsMCxAMDBAXDw0PFxsUEBAUGx8XFxcXFx8eFxoaGhoXHh4jJSclIx4vLzMzLy9AQEBAQEBAQEBAQEBAQEABEQ8PERMRFRISFRQRFBEUGhQWFhQaJhoaHBoaJjAjHh4eHiMwKy4nJycuKzU1MDA1NUBAP0BAQEBAQEBAQEBAQP/AABEIACAAIAMBIgACEQEDEQH/xABgAAEAAwEAAAAAAAAAAAAAAAAABAUHCAEBAAAAAAAAAAAAAAAAAAAAABAAAQMCAgsAAAAAAAAAAAAAAAECBBEDEgYhMRODo7PTVAUWNhEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8Az8AAdAAAAAAI8+fE8dEuTZtzZR7VMb6OdTE5GJoYirrUp/e8qd9wb3TGe/lJ2551sx8D/9k=';
exports.TEST_IMG_JPG = TEST_IMG_JPG;
const MJPEG_SERVER_TIMEOUT_MS = 10000;

class MJpegStream extends _stream.Writable {
  constructor(mJpegUrl, errorHandler = _lodash.default.noop, options = {}) {
    super(options);
    this.errorHandler = errorHandler;
    this.url = mJpegUrl;
    this.clear();
  }

  get lastChunkBase64() {
    return !_lodash.default.isEmpty(this.lastChunk) && _lodash.default.isBuffer(this.lastChunk) ? this.lastChunk.toString('base64') : null;
  }

  async lastChunkPNG() {
    if (_lodash.default.isEmpty(this.lastChunk) || !_lodash.default.isBuffer(this.lastChunk)) {
      return null;
    }

    try {
      const jpg = await (0, _imageUtil.getJimpImage)(this.lastChunk);
      return await jpg.getBuffer(_imageUtil.MIME_PNG);
    } catch (e) {
      return null;
    }
  }

  async lastChunkPNGBase64() {
    const png = await this.lastChunkPNG();
    return png ? png.toString('base64') : null;
  }

  clear() {
    this.registerStartSuccess = null;
    this.registerStartFailure = null;
    this.responseStream = null;
    this.consumer = null;
    this.lastChunk = null;
    this.updateCount = 0;
  }

  async start(serverTimeout = MJPEG_SERVER_TIMEOUT_MS) {
    this.stop();
    await initMJpegConsumer();
    this.consumer = new MJpegConsumer();
    const startPromise = new _bluebird.default((res, rej) => {
      this.registerStartSuccess = res;
      this.registerStartFailure = rej;
    }).timeout(serverTimeout, `Waited ${serverTimeout}ms but the MJPEG server never sent any images`);
    const url = this.url;

    const onErr = err => {
      this.lastChunk = null;

      _logger.default.error(`Error getting MJpeg screenshot chunk: ${err.message}`);

      this.errorHandler(err);

      if (this.registerStartFailure) {
        this.registerStartFailure(err);
      }
    };

    const onClose = () => {
      _logger.default.debug(`The connection to MJPEG server at ${url} has been closed`);

      this.lastChunk = null;
    };

    try {
      this.responseStream = (await (0, _axios.default)({
        url,
        responseType: 'stream',
        timeout: serverTimeout
      })).data;
    } catch (e) {
      return onErr(e);
    }

    this.responseStream.once('close', onClose).on('error', onErr).pipe(this.consumer).pipe(this);
    await startPromise;
  }

  stop() {
    if (!this.consumer) {
      return;
    }

    this.responseStream.unpipe(this.consumer);
    this.consumer.unpipe(this);
    this.responseStream.destroy();
    this.clear();
  }

  write(data) {
    this.lastChunk = data;
    this.updateCount++;

    if (this.registerStartSuccess) {
      this.registerStartSuccess();
      this.registerStartSuccess = null;
    }
  }

}

exports.MJpegStream = MJpegStream;

function initMJpegServer(port, intMs = 300, times = 20) {
  const server = _http.default.createServer(async function (req, res) {
    const mJpegReqHandler = _mjpegServer.default.createReqHandler(req, res);

    const jpg = Buffer.from(TEST_IMG_JPG, 'base64');

    for (let i = 0; i < times; i++) {
      await _bluebird.default.delay(intMs);

      mJpegReqHandler._write(jpg, null, _lodash.default.noop);
    }

    mJpegReqHandler.close();
  }).listen(port);

  return server;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
